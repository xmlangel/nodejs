/**
 * Copyright 2016 the WHATAP project authors. All rights reserved.
 * Use of this source code is governed by a license that
 * can be found in the LICENSE file.
 */

var Pack            = require('./pack'),
    PackEnum        = require('./packenum'),
    IntKeyLinkedMap = require('../util/intkey-linkedmap'),
    DataOutputX     = require('../io/data-outputx'),
    DataInputX      = require('../io/data-inputx'),
    Long            = require('long');

function TimeCount(count, error, time){
    this.count = count || 0;
    this.error = error || 0;
    this.time = Long.fromNumber(time || 0);

    this.add = function(time, error){
        this.count++;
        this.time = this.time.add(time);
        if(error){
            this.error++;
        }
    };

    this.merge = function(o){
        this.count += o.count;
        this.time = this.time.add(o.time);
        this.error += o.error;
    };

    this.copy = function(){
        return new TimeCount(this.count, this.error, this.time);
    };
}

function ServiceRec() {
    this.hash = 0; /*int*/
    this.profiled = 0; /*boolean*/
    this.count = 0; /*int*/
    this.error = 0; /*int*/
    this.actived = 0; /*int*/
    this.time_sum = Long.fromNumber(0); /*long*/
    this.time_std = Long.fromNumber(0); /*long*/
    this.time_min = 0; /*int*/
    this.time_max = 0; /*int*/
    this.sql_count = 0; /*int*/
    this.sql_time = Long.fromNumber(0); /*long*/
    this.sql_fetch = 0; /*int*/
    this.sql_fetch_time = Long.fromNumber(0); /*long*/
    this.sql_update_record = 0; /*int*/
    this.sql_commit_count = 0; /*int*/

    this.sql_select = 0; /*int*/
    this.sql_update = 0; /*int*/
    this.sql_delete = 0; /*int*/
    this.sql_insert = 0; /*int*/
    this.sql_others = 0; /*int*/

    this.httpc_count = 0; /*int*/
    this.httpc_time = Long.fromNumber(0); /*long*/
    this.malloc_sum = Long.fromNumber(0); /*long*/
    this.cpu_sum = Long.fromNumber(0); /*long*/

    this.status200 = 0; /*int*/
    this.status300 = 0; /*int*/
    this.status400 = 0; /*int*/
    this.status500 = 0; /*int*/

    this.sqlMap; /*IntKeyLinkedMap<TimeCount>*/
    this.httpcMap; /*IntKeyLinkedMap<TimeCount>*/

    this.mergeForStat = function(o){
        this.count += o.count;
        this.error += o.error;
        this.actived += o.actived;
        this.time_sum = this.time_sum.add(o.time_sum);
        this.time_std = this.time_std.add(o.time_std);
        this.time_min = Math.min(this.time_min, o.time_min);
        this.time_max = Math.max(this.time_max, o.time_max);
        this.sql_count += o.sql_count;
        this.sql_time = this.sql_time.add(o.sql_time);
        this.sql_fetch += o.sql_fetch;
        this.sql_fetch_time = this.sql_fetch_time.add(o.sql_fetch_time);
        this.sql_update_record += o.sql_update_record;
        this.sql_commit_count += o.sql_commit_count;

        this.sql_select += o.sql_select;
        this.sql_update += o.sql_update;
        this.sql_delete += o.sql_delete;
        this.sql_insert += o.sql_insert;
        this.sql_others += o.sql_others;

        this.httpc_count += o.httpc_count;
        this.httpc_time = this.httpc_time.add(o.httpc_time);
        this.malloc_sum = this.malloc_sum.add(o.malloc_sum);
        this.cpu_sum = this.cpu_sum.add(o.cpu_sum);
    };

    this.merge = function(o) {
        this.profiled = this.profiled | o.profiled;
        this.count += o.count;
        this.error += o.error;
        this.actived += o.actived;
        this.time_sum = this.time_sum.add(o.time_sum);
        this.time_std = this.time_std.add(o.time_std);
        this.time_min = Math.min(this.time_min, o.time_min);
        this.time_max = Math.max(this.time_max, o.time_max);
        this.sql_count += o.sql_count;
        this.sql_time = this.sql_time.add(o.sql_time);
        this.sql_fetch += o.sql_fetch;
        this.sql_fetch_time = this.sql_fetch_time.add(o.sql_fetch_time);
        this.sql_update_record += o.sql_update_record;
        this.sql_commit_count += o.sql_commit_count;

        this.sql_select += o.sql_select;
        this.sql_update += o.sql_update;
        this.sql_delete += o.sql_delete;
        this.sql_insert += o.sql_insert;
        this.sql_others += o.sql_others;

        this.httpc_count += o.httpc_count;
        this.httpc_time = this.httpc_time.add(o.httpc_time);
        this.malloc_sum = this.malloc_sum.add(o.malloc_sum);
        this.cpu_sum = this.cpu_sum.add(o.cpu_sum);

        this.status200 += o.status200;
        this.status300 += o.status300;
        this.status400 += o.status400;
        this.status500 += o.status500;

        if (o.sqlMap != null && o.sqlMap.size() > 0) {
            if (this.sqlMap == null) {
                this.sqlMap = StatServicePack.createMap(o.sqlMap.size());
            }
            o.sqlMap.keys().forEach(function (key) {
                var e = o.sqlMap.get(key);
                var tc = this.sqlMap.get(key);
                if (!tc) {
                    this.sqlMap.put(key, e.copy());
                } else {
                    tc.merge(e);
                }
            });
        }

        if (o.httpcMap != null && o.httpcMap.size() > 0) {
            if (this.httpcMap == null) {
                this.httpcMap = StatServicePack.createMap(o.httpcMap.size());
            }
            o.httpcMap.keys().forEach(function (key) {
                var e = o.httpcMap.get(key);
                var tc = this.httpcMap.get(key);
                if (!tc) {
                    this.httpcMap.put(key, e.copy());
                } else {
                    tc.merge(e);
                }
            });
        }
    };

    this.setUrlHash = function(hash) {
        this.hash = hash;
        return this;
    };

    this.getDeviation = function() {
        if (this.count == 0) {
            return 0;
        }
        var avg = this.time_sum.divide(this.count); /*long*/
        var variation = this.time_std.sub(avg.multiply(this.time_sum).multiply(2))
            .add(avg.multiply(avg).multiply(this.count))
            .divide(this.count); /*long*/

        // NAN check..
        var ret = Math.sqrt(variation);
        return ret == isNaN(ret) ? 0 : ret;
    };

    this.toString = function(){
        return "ServiceRec [hash=" + this.hash + ", profiled=" + this.profiled + ", count=" + this.count + ", error=" + this.error + ", actived=" + this.actived + ", time_sum="
            + this.time_sum + ", time_std=" + this.time_std + ", time_min=" + this.time_min + ", time_max=" + this.time_max + ", sql_count=" + this.sql_count + ", sql_time="
            + this.sql_time + ", sql_fetch=" + this.sql_fetch + ", sql_fetch_time=" + this.sql_fetch_time + ", sql_update_record=" + this.sql_update_record
            + ", sql_commit_count=" + this.sql_commit_count + ", sql_select=" + this.sql_select + ", sql_update=" + this.sql_update + ", sql_delete=" + this.sql_delete
            + ", sql_insert=" + this.sql_insert + ", sql_others=" + this.sql_others + ", httpc_count=" + this.httpc_count + ", httpc_time=" + this.httpc_time
            + ", malloc_sum=" + this.malloc_sum + ", cpu_sum=" + this.cpu_sum + ", status200=" + this.status200 + ", status300=" + this.status300 + ", status400="
            + this.status400 + ", status500=" + this.status500 + ", sqlMap=" + this.sqlMap + ", httpcMap=" + this.httpcMap + "]";
    };
}

function StatServicePack(){
    Pack.call(this);

    this.records = null; /*byte[]*/
    this.record_count = 0; /*int*/

    return this;
}

StatServicePack.writeRec = function(dout, m) {
    if(m instanceof ServiceRec) {
        dout.writeInt(m.hash);
        dout.writeBoolean(m.profiled);
        dout.writeDecimal(m.count);
        dout.writeDecimal(m.error);
        dout.writeDecimal(m.actived);
        dout.writeDecimal(m.time_sum);
        dout.writeDecimal(m.time_std);
        dout.writeDecimal(m.time_min);
        dout.writeDecimal(m.time_max);
        dout.writeDecimal(m.sql_count);
        dout.writeDecimal(m.sql_time);
        dout.writeDecimal(m.sql_fetch);
        dout.writeDecimal(m.sql_fetch_time);
        dout.writeDecimal(m.sql_update_record);
        dout.writeDecimal(m.sql_commit_count);
        dout.writeDecimal(m.sql_select);
        dout.writeDecimal(m.sql_update);
        dout.writeDecimal(m.sql_delete);
        dout.writeDecimal(m.sql_insert);
        dout.writeDecimal(m.sql_others);

        dout.writeDecimal(m.httpc_count);
        dout.writeDecimal(m.httpc_time);
        dout.writeDecimal(m.malloc_sum);
        dout.writeDecimal(m.cpu_sum);

        dout.writeDecimal(m.status200);
        dout.writeDecimal(m.status300);
        dout.writeDecimal(m.status400);
        dout.writeDecimal(m.status500);

        if (typeof m.sqlMap === 'undefined' || m.sqlMap == null) {
            dout.writeDecimal(0);
        } else {
            dout.writeDecimal(m.sqlMap.size());
            var en = m.sqlMap.entries();
            while(en.hasMoreElements()) {
                var ent = en.nextElement();
                dout.writeInt(parseInt(ent.getKey()));
                dout.writeDecimal(ent.getValue().count);
                dout.writeDecimal(ent.getValue().error);
                dout.writeDecimal(ent.getValue().time);
            }
        }

        if (typeof m.httpcMap === 'undefined' || m.httpcMap == null) {
            dout.writeDecimal(0);
        } else {
            dout.writeDecimal(m.httpcMap.size());
            var en = m.httpcMap.entries();
            while(en.hasMoreElements()) {
                var ent = en.nextElement();
                dout.writeInt(parseInt(ent.getKey()));
                dout.writeDecimal(ent.getValue().count);
                dout.writeDecimal(ent.getValue().error);
                dout.writeDecimal(ent.getValue().time);
            }
        }
    }
};
StatServicePack.readRec = function(din) {
    var m = new ServiceRec();
    m.hash = din.readInt();
    m.profiled = din.readBoolean();
    m.count = din.readDecimal();
    m.error = din.readDecimal();
    m.actived = din.readDecimal();
    m.time_sum = din.readDecimal();
    m.time_std = din.readDecimal();
    m.time_min = din.readDecimal();
    if (m.time_min < 0)
        m.time_min = 0;

    m.time_max = din.readDecimal();

    m.sql_count = din.readDecimal();
    m.sql_time = din.readDecimal();
    m.sql_fetch = din.readDecimal();
    m.sql_fetch_time = din.readDecimal();
    m.sql_update_record = din.readDecimal();
    m.sql_commit_count = din.readDecimal();

    m.sql_select = din.readDecimal();
    m.sql_update = din.readDecimal();
    m.sql_delete = din.readDecimal();
    m.sql_insert = din.readDecimal();
    m.sql_others = din.readDecimal();

    m.httpc_count = din.readDecimal();
    m.httpc_time = din.readDecimal();
    m.malloc_sum = din.readDecimal();
    m.cpu_sum = din.readDecimal();

    m.status200 = din.readDecimal();
    m.status300 = din.readDecimal();
    m.status400 = din.readDecimal();
    m.status500 = din.readDecimal();

    var i;
    var sqlcnt = din.readDecimal();
    if (sqlcnt > 0) {
        m.sqlMap = StatServicePack.createMap(sqlcnt);
        for (i = 0; i < sqlcnt; i++) {
            var hash = din.readInt();
            var count = din.readDecimal();
            var error = din.readDecimal();
            var time = din.readDecimal();
            m.sqlMap.put(hash, new TimeCount(count, error, time));
        }
    }
    var httpcnt = din.readDecimal();
    if (httpcnt > 0) {
        m.httpcMap = StatServicePack.createMap(httpcnt);
        for (i = 0; i < httpcnt; i++) {
            var hash = din.readInt();
            var count = din.readDecimal();
            var error = din.readDecimal();
            var time = din.readDecimal();
            m.httpcMap.put(hash, new TimeCount(count, error, time));
        }
    }

    return m;
};
StatServicePack.createMap = function(){
    var map = new IntKeyLinkedMap();
    map.create = function () {
        return this.size() >= 1000 ? null : new TimeCount();
    };
    return map;
};
StatServicePack.prototype = new Pack();
StatServicePack.prototype.constructor = StatServicePack;
StatServicePack.prototype.getPackType = function(){
    return PackEnum.STAT_SERVICE;
};
StatServicePack.prototype.write = function(dout){
    Pack.prototype.write.call(this, dout);
    dout.writeBlob(this.records);
    dout.writeDecimal(this.record_count);
};
StatServicePack.prototype.read = function(din){
    Pack.prototype.read.call(this, din);
    this.records = din.readBlob();
    this.record_count = din.readDecimal();
    return this;
};
StatServicePack.prototype.setRecords = function(size /*int*/, items /*Enumer<ServiceRec>*/) {
    var dout = new DataOutputX();
    dout.writeShort(size);

    for(var i=0; i<size; i++) {
        StatServicePack.writeRec(dout, items.nextElement());
    }
    this.records = dout.toByteArray();
    this.record_count = size;
    return this;
};
StatServicePack.prototype.getRecords = function() {
    var items = [];
    if (this.records == null || 'undefined') {
        return null;
    }

    var din = new DataInputX(this.records);
    var i;
    for (i = 0; i < din.readShort(); i++) {
        items.push(StatServicePack.readRec(din));
    }
    return items;
};
StatServicePack.prototype.toString = function(){
    var text = 'StatService ' + Pack.prototype.toString.call(this) + ', records=' + this.record_count;
    if (this.records !== null){
        text += ', bytes=' + this.records.length;
    }
    return text;
};

exports.TimeCount = TimeCount;
exports.ServiceRec = ServiceRec;
exports.StatServicePack = StatServicePack;