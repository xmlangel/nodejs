/**
 * Copyright 2016 the WHATAP project authors. All rights reserved.
 * Use of this source code is governed by a license that
 * can be found in the LICENSE file.
 */

var conf            = require('../conf/configure'),
    secuMaster      = require('../net/security-master'),
    TcpRequestMgr   = require('../net/tcprequest-mgr'),
    NetFlag         = require('../net/netflag').NetFlag,
    ParamDef        = require('../net/paramdef'),
    DateUtil        = require('./../util/dateutil'),
    Long            = require('long');

var sendPack = function(p){
    if (p == null)
        return;

    p.pcode = secuMaster.PCODE;
    p.oid = secuMaster.OID;

    switch (conf.encrypt_level || 2) {
        case 1:
            TcpRequestMgr.add(0, p);
            break;
        case 2:
            TcpRequestMgr.add(NetFlag.SECURE_HIDE, p);
            break;
        case 3:
        default:
            TcpRequestMgr.add(NetFlag.SECURE_CYPHER, p);
            break;
    }
};

var sendCounterPack = function(p){
    return sendPack(p);
};

var sendExtensionPack = function(p){

};

var sendHitMapPack1 = function(p){
    return sendPack(p);
};

var sendActiveStackPack = function(p){
    p.pcode = secuMaster.PCODE;
    p.oid = secuMaster.OID;

    var enc_level = conf.encrypt_level || 2;
    switch (enc_level) {
        case 1:
            TcpRequestMgr.addProfile(0, p);
            break;
        case 2:
            TcpRequestMgr.addProfile(NetFlag.SECURE_HIDE, p);
            break;
        case 3:
        default:
            TcpRequestMgr.addProfile(NetFlag.SECURE_CYPHER, p);
            break;
    }
};

var sendTextPack = function(p){
    p.pcode = secuMaster.PCODE;
    p.oid = secuMaster.OID;
    p.time = Long.fromNumber(DateUtil.currentTime());

    var enc_level = conf.encrypt_level || 2;

    switch (enc_level) {
        case 1:
            TcpRequestMgr.add(NetFlag.SECURE_HIDE, p);
            break;
        case 2:
            TcpRequestMgr.add(NetFlag.SECURE_CYPHER, p);
            break;
        case 3:
        default:
            TcpRequestMgr.add(NetFlag.SECURE_CYPHER, p);
            break;
    }
};

var sendErrorSnapPack = function(p){
    return sendPack(p);
};

var sendProfilePack = function(p){
    p.pcode = secuMaster.PCODE || 1001;
    p.oid = secuMaster.OID;

    var enc_level = conf.encrypt_level || 2;
    switch(enc_level) {
        case 1:
            break;
        case 2:
            TcpRequestMgr.addProfile(NetFlag.SECURE_CYPHER, p);
            break;
        case 3:
        default:
            TcpRequestMgr.addProfile(NetFlag.SECURE_CYPHER, p);
            break;
    }
};

var sendStatServicePack = function (p) {
    return sendPack(p);
};

var sendStatSqlPack = function(p){
    return sendPack(p);
};

var sendStatHttpcPack = function(p){
    return sendPack(p);
};

var sendStatErrorPack = function(p){
    return sendPack(p);
};

var sendRealtimeUserPack = function(p){
    return sendPack(p);
};

var sendStatRemoteIpPack = function(p){
    return sendPack(p);
};

var sendStatUserAgentPack = function(p){
    return sendPack(p);
};

var sendEventPack = function(p){

};

var sendBoot = function(p){
    p.id = ParamDef.AGENT_BOOT_ENV;
    p.pcode = secuMaster.PCODE;
    p.oid = secuMaster.OID;
    p.time = Long.fromNumber(DateUtil.currentTime());

    var enc_level = conf.encrypt_level || 2;
    switch (enc_level) {
        case 1:
            TcpRequestMgr.add(NetFlag.SECURE_HIDE, p);
            break;
        case 2:
            TcpRequestMgr.add(NetFlag.SECURE_CYPHER, p);
            break;
        case 3:
        default:
            TcpRequestMgr.add(NetFlag.SECURE_CYPHER, p);
            break;
    }
};

var sendResponse = function(p){
    p.pcode = secuMaster.PCODE;
    p.oid = secuMaster.OID;
    switch (conf.encrypt_level) {
        case 1:
            TcpRequestMgr.add(NetFlag.SECURE_HIDE, p);
            break;
        case 2:
            TcpRequestMgr.add(NetFlag.SECURE_CYPHER, p);
            break;
        case 3:
        default:
            TcpRequestMgr.add(NetFlag.SECURE_CYPHER, p);
            break;
    }
};

var sendResponseHide = function(p){
    p.pcode = secuMaster.PCODE;
    p.oid = secuMaster.OID;
    switch (conf.encrypt_level) {
        case 1:
            TcpRequestMgr.add(NetFlag.SECURE_HIDE, p);
            break;
        case 2:
            TcpRequestMgr.add(NetFlag.SECURE_CYPHER, p);
            break;
        case 3:
        default:
            TcpRequestMgr.add(NetFlag.SECURE_CYPHER, p);
            break;
    }
};

var DataPackSender = {
    sendCounterPack         : sendCounterPack,
    sendExtensionPack       : sendExtensionPack,
    sendHitMapPack1         : sendHitMapPack1,
    sendActiveStackPack     : sendActiveStackPack,
    sendTextPack            : sendTextPack,
    sendErrorSnapPack       : sendErrorSnapPack,
    sendProfilePack         : sendProfilePack,

    sendStatServicePack     : sendStatServicePack,
    sendStatSqlPack         : sendStatSqlPack,
    sendStatHttpcPack       : sendStatHttpcPack,
    sendStatErrorPack       : sendStatErrorPack,
    sendStatRemoteIpPack    : sendStatRemoteIpPack,
    sendStatUserAgentPack   : sendStatUserAgentPack,

    sendRealtimeUserPack    : sendRealtimeUserPack,
    sendEventPack           : sendEventPack,
    sendBoot                : sendBoot,
    sendResponse            : sendResponse,
    sendResponseHide        : sendResponseHide
}

module.exports = DataPackSender;