/**
 * Copyright 2016 the WHATAP project authors. All rights reserved.
 * Use of this source code is governed by a license that
 * can be found in the LICENSE file.
 */

var fs = require('fs'),
    path = require('path');

var ArrayUtil = require('./../util/utils').Array;
var rootFolder = path.dirname(require.main.filename);
var packageFolder = path.join(rootFolder, 'node_modules');

var AOP = require('./../core/interceptor').Interceptor,
    TraceContextManager = require('../trace/trace-context-manager'),
    DataTextAgent   = require('../data/datatext-agent'),
    MethodStep  = require('../step/method-stepx'),
    HashUtil    = require('../util/hashutil'),
    conf        = require('../conf/configure');

var PackageCtrHelper = function(){
}
var loadedPackageList = [];
var loadedPackages = {};

PackageCtrHelper.addPackage = function(name, callPath, pkg){
    try {
        if (name[0] != '.') {
            if (ArrayUtil.isExist(loadedPackageList, name) == false) {
                loadedPackageList.push(name);
            }
        } else if(callPath != null){
            // var callerPath = callPath.substr(0, callPath.lastIndexOf('/'));
            var callerPath = path.join(callPath, '..');
            var filename = name;
            var realPath = callerPath;
            try{
                realPath = fs.realpathSync(path.join(callerPath, filename));
            }catch(e){
                // console.error(e);
                try{
                    filename += '.js';
                    realPath = fs.realpathSync(path.join(callerPath, filename));
                }catch(e){
                    console.error(e);
                }
            }
            loadedPackages[realPath] = pkg;
        }
    }catch(e){
        console.error(e);
        console.log(name, callPath);
    }
};
PackageCtrHelper.dynamicHook = function(realPath, funcName) {
    if(realPath == null || funcName == null) {
        return;
    }
    if(loadedPackages[realPath]){
        var pkg = loadedPackages[realPath];

        if(pkg['prototype']){
            if(pkg['prototype'][funcName] ){
                var _aop = new AOP(null);
                _aop.both(pkg['prototype'], funcName,
                    function(){
                        // transaction step
                        var ctx = TraceContextManager.getCurrentContext(),
                            step = new MethodStep(),
                            msg = realPath + ' ' + funcName,
                            hash = HashUtil.hashFromString(msg);

                        DataTextAgent.METHOD.add(hash, msg);
                        step.hash = hash;
                        step.start_time = ctx.getElapsedTime();
                        pkg.__whatap_step__ = step;
                    },
                    function(){
                        var ctx = TraceContextManager.getCurrentContext();
                        var step = pkg.__whatap_step__;
                        step.elapsed = ctx.getElapsedTime() - step.start_time;
                        ctx.profile.add(step);
                    });
            }
        } else {
            _aop.before(pkg, functName, function(){
                // transaction step
            }, false);
        }
    }
};
PackageCtrHelper.getLoadedPackageList = function(filter){
    var COUNT_PER_PAGE = 100;

    return loadedPackageList;
};
PackageCtrHelper.getInstalledPackageList = function(){
    try{
        var dirs = fs.readdirSync( packageFolder );
        if(dirs && dirs.length > 0){
            dirs = dirs.filter(function(item){
                return item.indexOf('.') != 0;
            })
        }
        return dirs;
    }catch(e){
        console.log(e);
    }
    return [];
}
PackageCtrHelper.getPackageDetail = function(pkg){
    try{
        var packageFile = fs.readFileSync( path.join(packageFolder, pkg, 'package.json'));

        var packageJson = JSON.parse(packageFile);
        return packageJson.dependencies;
    }catch(e){
        console.log(e);
    }
}

conf.on('hook_method_pattern', function (value) {
    var methods = value.split(',');

    methods.forEach(function (path) {

        var relative_path = path.substr(0, path.lastIndexOf('/'));
        var method = path.substr(path.lastIndexOf('/') + 1, path.length);

        while(relative_path[0] == '.') {
            relative_path = relative_path.substr(1);
        }
        var root = process.cwd();
        if(root.indexOf('/bin') >= 0) {
            root = root.substr(0, root.indexOf('/bin'));
        }
        var real_path = root + relative_path;
        PackageCtrHelper.dynamicHook(real_path, method);
    });

});

module.exports = PackageCtrHelper;