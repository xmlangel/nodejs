/**
 * Copyright 2016 the WHATAP project authors. All rights reserved.
 * Use of this source code is governed by a license that
 * can be found in the LICENSE file.
 */

var os = require('os');
var RequestQueue    = require('./../util/request-queue'),
    PackEnum        = require('./../pack/packenum'),
    ParamDef        = require('./../net/paramdef'),
    Configure       = require('./../conf/configure'),
    PackageCtrHelper = require('./packagectr-helper'),
    MapValue        = require('./../value/map-value'),
    Logger          = require('../logger');

var ControlHandler = function(){
    this.queue = new RequestQueue(100);
    this._dataPackSender = null;
}

ControlHandler.prototype.add = function(p /* Pack */){
    this.process(p);
};

ControlHandler.prototype.process = function(p){
    switch(p.getPackType()){
        case PackEnum.PARAMETER:
            this.handle(p);
            break;
        default:
            Logger.printError('WHATAP-203', 'Unknown pack received ' + p, new Error('Unknown pack'));
    }
};

ControlHandler.prototype.handle = function(p){
    var self = this;
    if(!this._dataPackSender) {
        this._dataPackSender = require('../data/datapack-sender');
    }

    switch(p.id){
        case ParamDef.CONFIGURE_GET:
            var m = Configure.readCustomConfig();
            p.setMapValue(m);
            self._dataPackSender.sendResponseHide(p.getResponse());
            break;

        case ParamDef.GET_ACTIVE_STACK:
            var m = Configure.readCustomConfig();
            p.setMapValue(m);
            self._dataPackSender.sendResponseHide(p.getResponse());
            break;

        case ParamDef.HEAP_HISTO:

            break;

        case ParamDef.LOADED_CLASS_LIST:
            try {
                var packageList = PackageCtrHelper.getLoadedPackageList();
                var mv = new MapValue();
                var indexLv = mv.newList("index");
                var nameLv = mv.newList("name");
                var typeLv = mv.newList("type");
                var superClassLv = mv.newList("superClass");
                var interfacesLv = mv.newList("interfaces");
                var resourceLv = mv.newList("resource");

                for (var i = 0; i < packageList.length; i++) {
                    var pkg = packageList[i];
                    indexLv.addLong(i);
                    nameLv.addString(pkg);
                    typeLv.addString(pkg);
                    superClassLv.addString(pkg);
                    interfacesLv.addString(pkg);
                    resourceLv.addString(pkg);
                }
                p.putValue("classlist", mv);
            }catch(e){
                p.put("error", e.toString());
            }

            self._dataPackSender.sendResponseHide(p.getResponse());
            break;

        case ParamDef.LOADED_CLASS_DETAIL:
            var pkgName = p.getText("classname");
            try {
                var dependencies = PackageCtrHelper.getPackageDetail(pkgName);
                var subPkgNameAndVersion = '';
                for (var k in dependencies) {
                    var dep = dependencies[k];
                    subPkgNameAndVersion += k + ": " + dep + "\n";
                }
                p.put("class", subPkgNameAndVersion);
            }catch(e){
                p.put("error", e.toString());
            }
            break;
        case ParamDef.LOADED_CLASS_REDEFINE:

            break;

        case ParamDef.GET_ENV:

            try{
                var mv = new MapValue();
                for(var k in process.env){
                    var v = process.env[k];
                    mv.putString(k, v);
                }
                p.putValue("env",mv);
            }catch(e){
                p.putValue("error", e.toString());
            }
            self._dataPackSender.sendResponseHide( p.getResponse() );
            break;

        case ParamDef.SYSTEM_GC:
            try{
                var total1 = os.totalmem();
                var used1 = total1 - os.freemem();
                if (global.gc) {
                    global.gc();
                } else {
                    Logger.printError('WHATAP-177', 'Garbage collection unavailable.  Pass --expose-gc '
                        + 'when launching node to enable forced garbage collection.', new Error());
                }
                var total2 = os.totalmem();
                var used2 = total2 - os.freemem();

                var mv = new MapValue();
                mv.put("before-t", total1);
                mv.put("before-u", used1);
                mv.put("after-t", total2);
                mv.put("after-u", used2);
                p.put("gc", m);
            }catch(e){
                p.put("error", e.toString());
            }
            self._dataPackSender.sendResponseHide( p.getResponse() );
            break;

        case ParamDef.SET_CONFIG:
            try{
                var mv = p.getValue('config');
                var keys = mv.keys();
                var props = {};
                for(var i = 0 ; i < keys.length ; i++){
                    var k = keys[i];
                    var v = mv.getText(k);
                    props[k] = v;
                }
                Configure.saveProperty(props);
            }catch(e){
                p.putValue("error", e.toString())
            }
            self._dataPackSender.sendResponseHide( p.getResponse() );
            break;

        case ParamDef.LOADED_CLASS_DETAIL:

            break;

        case ParamDef.OPEN_SOCKET_LIST:

            break;

        case ParamDef.RESET_STRING_SENT_MARK:

            break;


        case ParamDef.AGENT_LOG_LIST:

            break;

        case ParamDef.AGENT_LOG_READ:

            break;

    }
}

module.exports = new ControlHandler();