/**
 * Copyright 2016 the WHATAP project authors. All rights reserved.
 * Use of this source code is governed by a license that
 * can be found in the LICENSE file.
 */


var ErrorData = require('../util/errordata'),
    ErrorSnapPack = require('../pack/errorsnap-pack'),
    StatErrorPack = require('../pack/staterror-pack').StatErrorPack,
    ErrorRec = require('../pack/staterror-pack').ErrorRec,
    hashUtil = require('../util/hashutil'),
    LongKeyLinkedMap = require('../util/longkey-linkedmap'),
    DataTextAgent = require('../data/datatext-agent'),
    Long = require('long');

var DataPackSender = require('../data/datapack-sender');

var ERROR_SNAP_SEQ = Long.fromNumber(Date.now());

function StatError() {
    this.table = new LongKeyLinkedMap();
    this.error = [];
}

function nextErrorSnapSeq(){
    ERROR_SNAP_SEQ = ERROR_SNAP_SEQ.add(1);
    return ERROR_SNAP_SEQ;
}

StatError.prototype.addErrorForStep = function(thr, dbc, service, steps, stackTrace) {
    var error_data = new ErrorData(thr, 0, txUrlHash, profile, true); // notdol: error데이터 객체를 만드는 의미가 없음
    var error_snap_pack = new ErrorSnapPack();                        // notdol: errorSnappack을 만드는 의미가 없음
    error_snap_pack.setProfile(error_data.profile);

    var msgHash = dbc;

    var key = Long.fromBits(classHash, msgHash); /*long*/
    var rec = this.table.get(key);
    rec.count++;
};
StatError.prototype.addError = function(thr, msgObj, txUrlHash, profile, type, hash){
    var msg = msgObj.msg;
    var class1 = msgObj.class;

    var msgHash = hashUtil.hashFromString(msg);
    DataTextAgent.ERROR.add(msgHash, msg);

    var classHash = hashUtil.hashFromString(class1);
    DataTextAgent.ERROR.add(classHash, class1);

    var key = Long.fromBits(classHash, txUrlHash); /*long*/
    var rec = this.table.get(key);
    if (rec == null) {
        rec = new ErrorRec();
        this.table.put(key, rec);
        rec.classHash = classHash;
        rec.service = txUrlHash;
        rec.msg = msgHash;
    }

    if (rec.snapSeq.isZero() && profile.hasStep()) {
        try {
            var p = new ErrorSnapPack();
            rec.snapSeq = p.seq = nextErrorSnapSeq();
            rec.msg = msgHash;
            p.setProfile(profile.getStep4Error());

            var i, stk, stk_hash;
            var callstacks =[];
            var stack = this.error || new Error().stack.split('\n');
            for(i = 1; i< stack.length; i++){
                stk = stack[i].trim();
                if(stk.indexOf('node_modules') < 0) {
                    stk_hash = hashUtil.hashFromString(stk);
                    DataTextAgent.STACK.add(stk_hash, stk);
                    callstacks.push(stk_hash);
                }
            }

            p.setStack(callstacks);

            p.append_type = type;
            p.append_hash = hash;

            DataPackSender.sendErrorSnapPack(p);
        } catch (e) {
            console.log(e)
        }
    }

    rec.count++;

    return Long.fromBits(msgHash, classHash);
};
StatError.prototype.send = function(now) {
    if (this.table.size() == 0)
        return;

    var statError = new StatErrorPack().setRecords(this.table.size(), this.table.values());
    statError.time = Long.fromNumber(now);
    this.table.clear();

    DataPackSender.sendStatErrorPack(statError);
};

module.exports = new StatError();
