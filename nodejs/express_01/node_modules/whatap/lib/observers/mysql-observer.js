/**
 * Copyright 2016 the WHATAP project authors. All rights reserved.
 * Use of this source code is governed by a license that
 * can be found in the LICENSE file.
 */

var TraceContextManager = require('../trace/trace-context-manager'),
    BuildPos            = require('../trace/build-pos'),
    ParsedSql           = require('../trace/parsed-sql'),
    SqlStepX            = require('../step/sql-stepx'),
    DBCStep             = require('../step/dbc-step'),
    ResultSetStep       = require('../step/resultset-step'),
    DataTextAgent       = require('../data/datatext-agent'),
    StatSql             = require('../stat/stat-sql'),
    MeterSql            = require('../counter/meter/meter-sql'),
    conf                = require('../conf/configure'),
    IntKeyMap           = require('../util/intkey-map'),
    EscapeLiteralSQL    = require('../util/escape-literal-sql'),
    HashUtil            = require('../util/hashutil'),
    StatError           = require('../stat/stat-error'),
    TextTypes           = require('../lang/text-types'),
    Logger              = require('../logger');

var MysqlObserver = function (agent) {
    this.agent = agent;
    this.packages = ['mysql'];
};

var queryHook = function (dbc_hash, agent) {
    return function (obj, args) {
        var error_stack = new Error().stack.split('\n');
        StatError.error = error_stack;
        BuildPos.error = error_stack;

        var ctx = TraceContextManager.getCurrentContext();
        if (ctx == null) {
            return;
        }

        var sql_step = new SqlStepX();
        sql_step.start_time = ctx.getElapsedTime();
        ctx.profile.push(sql_step);
        ctx.stack.push('Mysql Query');
        ctx.sql_count++;

        var sql = args.length > 0 ? args[0] : undefined,
            psql = null;

        if (sql != null && sql.length > 0) {
            try {
                psql = escapeLiteral(sql);
            } catch (e) {
                Logger.printError('WHATAP-191', 'MysqlObserver escapeliteral error', e);
            }
        }
        sql_step.hash = psql.sql;
        sql_step.crud = psql.type.charCodeAt(0);
        sql_step.dbc = dbc_hash;


        var els = new EscapeLiteralSQL(sql);
        els.process();
        BuildPos.profileSqlPos(sql_step, els.getParsedSql());
        ctx.active_sqlhash = sql_step.hash;
        ctx.active_dbc = sql_step.dbc;
        ctx.active_crud = sql_step.crud;

        var params = args.length > 1 && Array.isArray(args[1]) ? args[1] : undefined;

        agent.aop.functionHook(args, -1, function (obj, args) {
            if (ctx == null) {
                return;
            }
            TraceContextManager.resume(ctx._id);
            if(args[0]) { return; }

            sql_step.elapsed = ctx.getElapsedTime() - sql_step.start_time;
            ctx.sql_time += sql_step.elapsed;
            ctx.stack.pop();

            MeterSql.add(dbc_hash, sql_step.crud, sql_step.elapsed, false);
            StatSql.addSqlTime(ctx, ctx.service_hash, sql_step.dbc, sql_step.crud,
                sql_step.hash, sql_step.elapsed, args[0] != null, 0);

            if (Array.isArray(args[1]) && psql.type === 'S') {
                var result_step = new ResultSetStep();
                result_step.start_time = ctx.getElapsedTime();
                result_step.elapsed = 0;
                result_step.fetch = args[1].length;
                result_step.sqlhash = psql.sql;
                result_step.dbc = dbc_hash;
                ctx.profile.push(result_step);
                MeterSql.addFetch(result_step.dbc, result_step.fetch, 0);
                StatSql.addFetch(result_step.dbc, result_step.sqlhash, result_step.fetch, 0);
            }

            if (args[1] != null && psql.type === 'U') {
                sql_step.updated = args[1].affectedRows || 0;
                MeterSql.addUpate(dbc_hash, psql.sql, sql_step.updated);
                StatSql.addUpdate(dbc_hash, psql.sql, sql_step.updated);
            }
        });
    }
};

var errorDelegate = function (ctx) {
    return function (obj, args) {
        if(ctx == null) { ctx = TraceContextManager.getCurrentContext(); }
        if(ctx == null) {return;}

        TraceContextManager.resume(ctx._id);
        var laststep = ctx.profile.getLastSteps(1);
        if(laststep == null || laststep.length == 0) {
            return;
        }

        var step = laststep[0];
        MeterSql.add(step.dbc, step.crud, step.elapsed, true);
        StatSql.addSqlTime(ctx, ctx.service_hash, step.dbc, step.crud,
            step.hash, step.elapsed, true, 0);

        var msgObj = { 'class': args[0].code, 'msg': args[0].message };
        if(args[0].fatal){
            // Connection Error
            step.error = StatError.addError({}, msgObj, ctx.service_hash, ctx.profile, 0, 0); /*long*/
        } else {
            msgObj = { 'class': args[0].code, 'msg': args[0].message };
            step.error = StatError.addError({}, msgObj, ctx.service_hash, ctx.profile, TextTypes.SQL, step.hash); /*long*/
        }
        if (ctx.error.isZero()) { ctx.error = step.error; }
        ctx.profile.pop(step);
    }
};

MysqlObserver.prototype.inject = function (mod, moduleName) {
    if(mod.__whatap_observe__) { return; }
    mod.__whatap_observe__ = true;

    var self = this;
    var aop = self.agent.aop;

    if(!conf.getProperty('trx_profile_sql_enabled', true)) return;

    aop.both(mod, 'createConnection',
        function (obj, args, lctx) {
            var ctx = lctx.context;
            if(ctx == null || ctx.db_opening) { return; }

            ctx.db_opening = true;
            ctx.stack.push('create Connection');

            var dbc_step = new DBCStep();
            dbc_step.start_time = ctx.getElapsedTime();
            lctx.step = dbc_step;

            var error_stack = new Error().stack.split('\n');
            StatError.error = error_stack;
            BuildPos.error = error_stack;

        },
        function (obj, args, ret, lctx) {
            var ctx = lctx.context;
            if (ctx == null) { return; }
            ctx.stack.pop();

            var step = lctx.step, dbc, dbc_hash;
            if(args.length > 0) {
                var info = args[0];
                var dbc_prefix = 'jdbc:'; //Open [DatabaseName] connection 메세지 보여줄때 필요함.
                dbc = dbc_prefix + 'mysql://';
                dbc += info.user || '';
                dbc += "@";
                dbc += info.host || '';
                dbc += '/';
                dbc += info.database || '';
                dbc_hash = HashUtil.hashFromString(dbc);
                DataTextAgent.DBC.add(dbc_hash, dbc);
                DataTextAgent.METHOD.add(dbc_hash, dbc);
                DataTextAgent.ERROR.add(dbc_hash, dbc);
            }
            step.hash = dbc_hash;

            aop.both(ret, 'connect', function (obj, args, ret) {
                var ctx = TraceContextManager.getCurrentContext();
                ctx.stack.push('Mysql Connect');
                aop.functionHook(args, -1, function (obj, args) {
                    TraceContextManager.resume(ctx._id);

                    step.elapsed = ctx.getElapsedTime() - step.start_time;
                });
            }, function(obj, args, ret, lctx){
                ctx.profile.push(step);
                ctx.stack.pop();
            });

            aop.before(ret, 'query', queryHook(dbc_hash, self.agent));

            aop.after(ret._protocol, '_delegateError', errorDelegate(ctx));
        });

    aop.after(mod, 'createPool', function (obj, args, ret) {
        if(args.length > 0) {
            var info = args[0], dbc, dbc_hash;
            var dbc_prefix = 'jdbc:'; //Open [DatabaseName] connection 메세지 보여줄때 필요함.
            dbc = dbc_prefix + 'mysql://';
            dbc += info.user || '';
            dbc += "@";
            dbc += info.host || '';
            dbc += '/';
            dbc += info.database || '';
            dbc_hash = HashUtil.hashFromString(dbc);
            DataTextAgent.DBC.add(dbc_hash, dbc);
        }

        aop.both(ret, 'getConnection', function (obj, args) {
            var ctx = TraceContextManager.getCurrentContext();
            if(ctx == null) {return;}

            aop.functionHook(args, 0, function (obj, args) {
                TraceContextManager.resume(ctx._id);
                if(args[0] != null) { return; }
                var conn = args[1];
                if(conn.__query_hook__) { return; }
                conn.__query_hook__ = true;
                aop.before(conn, 'query', queryHook(dbc_hash, self.agent));
                aop.before(conn._protocol, '_delegateError', errorDelegate());
            });

        }, function (obj, args) {
            var all = obj._allConnections.length,
                idle = obj._freeConnections.length;
            MeterSql.setConnection((all - idle), idle);
        });
    });
};

var checkedSql = new IntKeyMap(1001);
var nonLiteSql = new IntKeyMap(10000);

function escapeLiteral(sql) {
    var sqlHash = HashUtil.hashFromString(sql);
    var psql = nonLiteSql.get(sqlHash);

    if(psql != null) {
        return psql;
    }
    psql = checkedSql.get(sqlHash);

    if(psql != null) {
        return psql;
    }

    var els = new EscapeLiteralSQL(sql);
    els.process();

    var hash = HashUtil.hashFromString(els.getParsedSql());
    DataTextAgent.SQL.add(hash, els.getParsedSql());

    if(hash == sqlHash) {
        psql = new ParsedSql(els.sqlType, hash, null);
        nonLiteSql.put(sqlHash, psql);
    } else {
        psql = new ParsedSql(els.sqlType, hash, els.getParameter());
        checkedSql.put(sqlHash, psql);
    }
    return psql;
}

exports.MysqlObserver = MysqlObserver;