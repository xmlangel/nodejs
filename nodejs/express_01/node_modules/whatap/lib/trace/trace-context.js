/**
 * Copyright 2016 the WHATAP project authors. All rights reserved.
 * Use of this source code is governed by a license that
 * can be found in the LICENSE file.
 */

var ProfileCollector    = require('./profile-collector'),
    IntKeyMap           = require('../util/intkey-map'),
    KeyGen              = require('../util/keygen'),
    Long                = require('long');

function TraceContext(id) {
    this._id = id;
    this.isStaticContents = false;
    this.profile = new ProfileCollector(this);

    this.profile_seq = KeyGen.next();
    this.thread = null;
    this.thread_id = Long.fromNumber(0);

    this.caller_pcode = Long.fromNumber(0);
    this.caller_oid = 0;
    this.caller_seq = Long.fromNumber(0);

    this.start_cpu = Long.fromNumber(0);
    this.start_malloc = Long.fromNumber(0);
    this.start_time = Long.fromNumber(0);

    this.status = 0;

    this.service_hash = 0;
    this.service_name = '';
    this.remoteIp = 0;
    this.error = Long.fromNumber(0);
    this.http_method = '';
    this.http_query = '';
    this.http_content_type = '';

    this.sql_count = 0;
    this.sql_time = 0;
    this.sql_insert = 0;
    this.sql_update = 0;
    this.sql_delete = 0;
    this.sql_select = 0;
    this.sql_others = 0;

    this.executed_sqlhash = 0;
    this.active_sqlhash = 0;
    this.active_dbc = 0;
    this.active_crud = 0;

    this.httpc_count = 0;
    this.httpc_time = 0;
    this.httpc_url = '';

    this.active_httpc_hash = 0;
    this.httpc_host = '';
    this.httpc_port = 0;

    this.userid = Long.fromNumber(0);
    this.userAgent = 0;
    this.userAgentString = '';
    this.referer = 0;
    this.login = '';
    this.userTransaction = 0;
    this.debug_sql_call = false;
    this.lastSqlStep = null; /*SqlStepX*/
    this.profileActive = 0;

    this.jdbc_updated = false;
    this.jdbc_update_record = 0;
    this.jdbc_identity = 0;
    this.jdbc_commit = 0;
    this.resultSql = new IntKeyMap();

    this.rs_count = 0;
    this.rs_time = Long.fromNumber(0);
    this.db_opening = false;

    this.stack = [];
}

TraceContext.prototype.getElapsedTime = function () {
    return Date.now() - this.start_time.toNumber();
};
TraceContext.prototype.resetStartTime = function () {
    this.start_time = Long.fromNumber(Date.now());
};

module.exports = TraceContext;