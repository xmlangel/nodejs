/**
 * Copyright 2016 the WHATAP project authors. All rights reserved.
 * Use of this source code is governed by a license that
 * can be found in the LICENSE file.
 */

var IntKeyMap       = require('../util/intkey-map'),
    TraceContext    = require('./trace-context'),
    Long            = require('long');

function TraceContextManager() {
}

TraceContextManager.nextId = 1;
TraceContextManager.currentId = undefined;
TraceContextManager.entry = new IntKeyMap();
TraceContextManager.local = {};

TraceContextManager.keys = function () {
    return TraceContextManager.entry.keys();
};
TraceContextManager.getContextEnumeration = function () {
    return TraceContextManager.entry.values();
};
TraceContextManager.size = function () {
    return TraceContextManager.entry.size();
};
TraceContextManager.getContext = function (key) {
    if(key == null) {
        return null;
    }
    return TraceContextManager.entry.get(key);
};
TraceContextManager.getCurrentContext = function () {
    if(TraceContextManager.entry.containsKey(TraceContextManager.currentId))
        return TraceContextManager.getContext(TraceContextManager.currentId);
    else
        return null;
};
TraceContextManager.start = function () {
    var ctx = new TraceContext(TraceContextManager.getNextId());
    ctx.start_time = Long.fromNumber(Date.now());
    TraceContextManager.entry.put(ctx._id, ctx);
    TraceContextManager.currentId = ctx._id;
    return ctx;
};
TraceContextManager.end = function (id) {
    if(id == null) {
        TraceContextManager.entry.remove(TraceContextManager.currentId); // important: high risky
        TraceContextManager.currentId = undefined;
    } else {
        TraceContextManager.entry.remove(id);
        return;
    }
};
TraceContextManager.getNextId = function () {
    TraceContextManager.nextId = (TraceContextManager.nextId + 1) % 10000000;
    return TraceContextManager.nextId;
};
TraceContextManager.getCurrentId = function () {
    return TraceContextManager.currentId;
};
TraceContextManager.resume = function (id) {
    if(this.entry.containsKey(id)) {
        TraceContextManager.currentId = id;
        return true;
    } else {
        TraceContextManager.currentId = undefined;
        return false;
    }
};
TraceContextManager.getTxProfile = function(n) {
    var ctx = TraceContextManager.getCurrentContext();
    if(ctx == null)
        return null;
    return ctx.profile.getLastSteps(n);
};
TraceContextManager.isExist = function (id) {
    return TraceContextManager.entry.containsKey(id);
};

module.exports = TraceContextManager;