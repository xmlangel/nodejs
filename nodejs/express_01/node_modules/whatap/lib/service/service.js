/**
 * Copyright 2016 the WHATAP project authors. All rights reserved.
 * Use of this source code is governed by a license that
 * can be found in the LICENSE file.
 */

var DataOutputX = require('../io/data-outputx'),
    Long        = require('long');

function Service() {
    this.seq = Long.fromNumber(0);
    this.endTime = Long.fromNumber(0);
    this.service = 0;
    this.elapsed = 0;
    this.error = Long.fromNumber(0);
    this.cpuTime = 0;
    this.malloc = 0;

    this.sqlCount = 0;
    this.sqlTime = 0;
    this.sqlFetchCount = 0;
    this.sqlFetchTime = 0;

    this.httpcCount = 0;
    this.httpcTime = 0;
    this.active = false;
    this.steps_data_pos = Long.fromNumber(0);
}
Service.prototype.getServiceType = function() {return 0};

Service.prototype.write = function(dout) {
    dout.writeLong(this.seq);
    dout.writeDecimal(this.endTime);
    dout.writeDecimal(this.service);
    dout.writeDecimal(this.elapsed);
    dout.writeDecimal(this.error);
    dout.writeDecimal(this.cpuTime);
    dout.writeDecimal(this.sqlCount);
    dout.writeDecimal(this.sqlTime);
    dout.writeDecimal(this.sqlFetchCount);
    dout.writeDecimal(this.sqlFetchTime);
    dout.writeDecimal(this.malloc);
    dout.writeDecimal(this.httpcCount);
    dout.writeDecimal(this.httpcTime);
    dout.writeBoolean(this.active);
    dout.writeDecimal(this.steps_data_pos);
};

Service.prototype.read = function(din) {
    this.seq = din.readLong();
    this.endTime = din.readDecimal();
    this.service =  din.readDecimal();
    this.elapsed = din.readDecimal();
    this.error = din.readDecimal();
    this.cpuTime = din.readDecimal();
    this.sqlCount = din.readDecimal();
    this.sqlTime = din.readDecimal();
    this.sqlFetchCount = din.readDecimal();
    this.sqlFetchTime = din.readDecimal();
    this.malloc = din.readDecimal();
    this.httpcCount = din.readDecimal();
    this.httpcTime = din.readDecimal();
    this.active = din.readBoolean();
    this.steps_data_pos = din.readDecimal();

    return this;
};

Service.toBytes = function(s) {
    var dout = new DataOutputX();
    if(s == null) {
        dout.writeByte(0);
        return dout.toByteArray();
    }
    dout.writeByte(s.getServiceType());
    s.write(dout);
    return dout.toByteArray();
};

Service.toObject = function(din) {
    var service = ServiceEnum.create(din.readByte());
    if(service == null) {
        return null;
    } else {
        service.read(din);
        return service;
    }
};

module.exports = Service;