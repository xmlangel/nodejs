/**
 * Copyright 2016 the WHATAP project authors. All rights reserved.
 * Use of this source code is governed by a license that
 * can be found in the LICENSE file.
 */

var net             = require('net');
netflag         = require('./netflag').NetFlag,
    netsrc          = require('./netflag').NetSrc,
    secu            = require('./security-master'),
    conf            = require('./../conf/configure'),
    DataOutputX     = require('./../io/data-outputx'),
    DataInputX      = require('./../io/data-inputx'),
    IPUtil          = require('./../util/iputil'),
    TcpReturn       = require('./tcp-return'),
    Receiver        = require('./receiver'),
    Logger          = require('../logger'),
    Long            = require('long');

function TcpSession() {
    if(typeof TcpSession.instance === 'object') {
        return TcpSession.instance;
    }

    this.socket = undefined;
    this.in = undefined;
    this.out = undefined;
    this.receiver = new Receiver();
    TcpSession.instance = this;
}

TcpSession.prototype.open = function(cb){
    var self = this;
    if(this.isOpen()) { cb(new Error('Already connected..')); }

    if(secu.PCODE == null || secu.PCODE == 0) { cb(new Error('PCODE is not defined..')); }

    var host = conf.getWhatapServerHost();
    var port = conf.whatap_server_port || 6600;
    var so_timeout = conf.tcp_so_timeout;
    var connection_timeout = conf.tcp_connection_timeout;

    var options = {
        host: host,
        port: port,
        agent: false
    };

    Logger.print('WHATAP-180', "[Try to connect to] " + JSON.stringify(options));
    this.out = net.connect(options, function(err) {
        if(err) {
            Logger.printError('WHATAP-181', 'Failed to connect to server', err, true);
            cb(err);
            return;
        }

        var localAddr = IPUtil.getIp();
        secu.decideAgentOnameOid(localAddr);
        if(conf.cipher_net_enabled){
            try {
                self.out.write( self.keyReset() );
            } catch(e) {
                Logger.printError("WHATAP-125", "KeyReset " + host + ":" + port, e, true);
            }
        }
    });

    this.out.on('error', function (err) {
        self.out = null;
        Logger.printError("WHATAP-127", 'Failed to connect to ' + JSON.stringify(options), err, true);
        cb(err);
    });

    var firstReceived = false;
    this.out.on('data', function(data){
        if(firstReceived) {
            self.read(data);
            return;
        }
        firstReceived = true;
        var d = self.readKeyReset(data);
        if(d.length != 0) {
            conf.updateNetCypherKey(d);
            if(cb) cb();
        }
    });

    this.out.on('end', function(){
        Logger.print("WHATAP-183", "Disconnected from server");
        setTimeout(function() {
            self.open();
        }, 5000);
    });
};

TcpSession.prototype.send = function(code , b ){
    try{
        if(this.out == null){
            return false;
        }
        var out = new DataOutputX();
        out.writeByte(netsrc.AGENT_JAVA_EMBED);
        out.writeByte(code);
        out.writeLong(secu.PCODE);
        out.writeInt(secu.OID);
        out.writeInt(conf.TRANSFER_KEY);
        out.writeIntBytes(b);
        this.out.write(out.toByteArray());
        return true;
    } catch(e) {
        Logger.printError('WHATAP-126', 'TcpSession Error', e);
    }
    close();
    return false;
};

TcpSession.prototype.readKeyReset = function( inPS /* DataInputX */){
    try {
        if( inPS.constructor == Buffer){
            inPS = new DataInputX(inPS);
        }
        var source = inPS.readByte();
        var code = inPS.readByte();
        var pcode = inPS.readLong();
        var oid = inPS.readInt();
        var transfer_key = inPS.readInt();
        var data = inPS.readIntBytes(1024);

        if( pcode != secu.PCODE || oid != secu.OID){
            return null;
        } else {
            return data;
        }
    } catch(e) {
        Logger.printError("WHATAP-189", 'License key or invalid agent version error(fail key)', e, true);
    }
};

TcpSession.prototype.keyReset = function(){
    var msg = new DataOutputX().writeText("hello").writeText(secu.ONAME).writeInt8(secu.IP).toByteArray();
    if( conf.cipher_net_enabled ){
        msg = secu.cypher.encrypt(msg);
    }

    var out = new DataOutputX();
    out.writeByte(netsrc.AGENT_JAVA_EMBED);
    out.writeByte(netflag.KEY_RESET);
    out.writeLong(Long.fromValue(secu.PCODE));
    out.writeInt(secu.OID);
    out.writeInt(0);
    out.writeIntBytes(msg);
    return out.toByteArray();
};

TcpSession.prototype.isOpen = function(){
    return this.out != null;
};

TcpSession.prototype.read = function (data) {
    var din = new DataInputX(data);
    var out = new TcpReturn();
    var source = din.readByte();

    out.code = din.readByte();
    var pcode = din.readLong();
    var oid = din.readInt();
    out.transfer_key = din.readInt();
    out.data = din.readIntBytes();

    if(pcode != secu.PCODE || oid != secu.OID) {
        Logger.printError('WHATAP-190', 'Received data is not mine..', new Error('Receive data error'));
        return null;
    }
    this.receiver.read(out);
};

module.exports = TcpSession;