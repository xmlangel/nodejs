/**
 * Copyright 2016 the WHATAP project authors. All rights reserved.
 * Use of this source code is governed by a license that
 * can be found in the LICENSE file.
 */

var DataInputX  = require('./../io/data-inputx'),
    License     = require('./../conf/license'),
    Cypher      = require('./../util/cypher'),
    IPUtil      = require('./../util/iputil'),
    OidUtil     = require('./../util/oidutil'),
    ProcessSeq  = require('./../util/process-seq'),
    HashUtil    = require('./../util/hashutil');

var cluster = require('cluster');

var lastOid = 0;

var SecurityMaster = {
    ONAME: '',
    IP: undefined,
    PCODE: undefined,
    OID: HashUtil.hash(new Buffer('')),
    run : function(cb){
        var conf = require('./../conf/configure');
        if( this.resetLicense( conf.license )) {
            require('../logger').print('WHATAP-110', "[pcode=" + this.PCODE
                + ",SECURE_KEY=" + this.SECURE_KEY.toString('hex')
                + "]");
            this.getClusterId(cb);
        } else {
            if(cb) cb(new Error('Invalid license'));
        }
    },
    resetLicense: function(lic /* String */){
        try {
            var key = License.getKey(lic);
            if(key.pcode == null || key.security_key == null) {
                throw new Error('Invalid license');
            }
            this.PCODE = key.pcode;
            this.SECURE_KEY = key.security_key;
            this.cypher = new Cypher(this.SECURE_KEY, 0);
            return true;
        } catch(e) {
            require('../logger').printError('WHATAP-606', 'LicenseKey is invalid ' + lic, e, true);
        }
        return false;
    },
    updateLocalIp: function(myIp){
        process.env["whatap.ip"] = myIp;
        this.IP = DataInputX.toInt
    },
    decideAgentOnameOid: function(myIp) {
        var Configuration = require('./../conf/configure');
        Configuration.setProperty('whatap.ip', myIp);

        this.IP = DataInputX.toInt(IPUtil.toBytes(myIp), 0);
        var port = Configuration.getProperty("whatap.port");
        OidUtil.setIp(IPUtil.toString(this.IP));
        OidUtil.setPort(port);
        OidUtil.setPid(process.pid);
        OidUtil.setHostName(require('os').hostname());
        if(require('cluster').isMaster){
            OidUtil.setType(Configuration.getProperty("whatap.type", "NODE"));
        }else{
            OidUtil.setType(Configuration.getProperty("whatap.type", "NODE"+ Configuration.getProperty('node.clusterId') ) );
        }

        OidUtil.setCmd(Configuration.getProperty("sun.java.command"));
        this.ONAME = OidUtil.mkOname(Configuration.getProperty("whatap.name", "{type}-{ip2}-{ip3}-{port}"));
        this.OID = OidUtil.mkOid(this.ONAME);

        if (lastOid != this.OID) {
            lastOid = this.OID;
            require('../logger').print('WHATAP-168', "OID: " + this.OID + " ONAME: " + this.ONAME + " IP: " + IPUtil.toString(this.IP));
        }
    },
    getClusterId: function(cb){
        if(cluster.isMaster){
            conf.setProperty('node.clusterId', '');
            if(cb) cb();
        }else{
            conf.setProperty('node.clusterId', cluster.worker.id);
            ProcessSeq('whatap').accessAuth(function(pseq){
                if(!pseq) return;
                var conf = require('./../conf/configure');
                conf.setProperty('node.clusterId', pseq);
                if(cb) cb();
            });
        }
        
    }
};

module.exports = SecurityMaster;