/**
 * Copyright 2016 the WHATAP project authors. All rights reserved.
 * Use of this source code is governed by a license that
 * can be found in the LICENSE file.
 */

var LinkedMap   = require('./linkedmap');

function IntIntMap(initCapacity, loadFactor) {
    LinkedMap.call(this, initCapacity, loadFactor);
}

IntIntMap.prototype = new LinkedMap();
IntIntMap.prototype.constructor = IntIntMap;
IntIntMap.prototype.add = function (key, value) {
    if(typeof value != 'number') {
        throw new Error('Value must be number!!');
        return;
    }

    var e = LinkedMap.prototype.get.call(this, key);
    if(e == null) {
        e = value;
    } else {
        e += value;
    }
    LinkedMap.prototype.put.call(this, key, e);
    return e;
};
IntIntMap.prototype.addNoOver = function (key, value) {
    if(typeof value != 'number') {
        throw new Error('Value must be number!!');
        return;
    }
    var e = LinkedMap.prototype._put.call(this, key, value, LinkedMap.MODE.LAST, true);
    return e == null ? 0 : e;
};
IntIntMap.prototype.toBytes = function (dout) {
    dout.writeDecimal(this.size());
    var en = this.entries();
    while(en.hasMoreElements()) {
        var e = en.nextElement();
        dout.writeDecimal(e.getKey());
        dout.writeDecimal(e.getValue());
    }
};
IntIntMap.prototype.toObject = function (din) {
    var cnt = din.readDecimal();
    for(var i=0; i<cnt; i++) {
        var key = din.readDecimal();
        var value = din.readDecimal();
        this.put(key, value);
    }
    return this;
};

module.exports = IntIntMap;