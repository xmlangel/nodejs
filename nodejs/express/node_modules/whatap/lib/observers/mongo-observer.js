/**
 * Copyright 2016 the WHATAP project authors. All rights reserved.
 * Use of this source code is governed by a license that
 * can be found in the LICENSE file.
 */


var TraceContextManager = require('../trace/trace-context-manager'),
    SqlStepX            = require('../step/sql-stepx'),
    ResultSetStep       = require('../step/resultset-step'),
    HashUtil            = require('../util/hashutil'),
    DataTextAgent       = require('../data/datatext-agent');

var MongoObserver = function (agent) {
    this.agent = agent;
    this.packages = ['mongodb'];
};

MongoObserver.prototype.inject = function( mod, moduleName ) {
    if(mod.__whatap_observe__) {return;}
    mod.__whatap_observe__ = true;

    var self = this;
    self.agent.aop.before(mod.Server.prototype, 'connect', function (obj, args) {

    });

    var insertCommnad = ['insert', 'insertOne', 'insertMany'];
    insertCommnad.forEach(function (command) {
        self.agent.aop.before(mod.Collection.prototype, command, function (obj, args) {
            var ctx = TraceContextManager.getCurrentContext();
            var sql_step = new SqlStepX();
            var sql = 'mongodb ' + command + ': ' + JSON.stringify(Object.keys(args[0]));
            sql_step.hash = HashUtil.hashFromString(sql);
            sql_step.start_time = ctx.getElapsedTime();
            sql_step.crud = 'I'.charCodeAt(0);
            DataTextAgent.SQL.add(sql_step.hash, sql);
            ctx.profile.push(sql_step);
            self.agent.aop.functionHook(args, -1, function (obj, args) {
                sql_step.elapsed = ctx.getElapsedTime() - sql_step.start_time;
            });
        });
    });

    var findCommand = ['find', 'findOne', 'findMany'];
    findCommand.forEach(function (command) {
        self.agent.aop.both(mod.Collection.prototype, command, function (obj, args, lctx) {
            var ctx = TraceContextManager.getCurrentContext();
            if(ctx == null) { return; }

            ctx.stack.push('Mongodb ' + command);
            var sql_step = new SqlStepX();
            var sql = 'mongodb ' + command + ': ' + JSON.stringify(args[0]);
            sql_step.hash = HashUtil.hashFromString(sql);
            sql_step.start_time = ctx.getElapsedTime();
            sql_step.crud = 'S'.charCodeAt(0);
            DataTextAgent.SQL.add(sql_step.hash, sql);
            ctx.profile.push(sql_step);
            
            self.agent.aop.functionHook(args, -1, function (obj, args, ret) {
                ctx.stack.pop();
                if(args[0] != null) {
                    //error
                }
                if(args[1]) {
                    self.agent.aop.before(args[1], 'toArray', function (obj, args) {

                        var result_step = new ResultSetStep();
                        result_step.start_time = ctx.getElapsedTime();
                        result_step.sqlhash = sql_step.hash;
                        ctx.profile.push(result_step);
                        ctx.stack.push('Mongodb fetch');

                        self.agent.aop.functionHook(args, -1, null, function (obj, args) {
                            ctx.stack.pop();
                            if(args[0]) {
                                return;
                            }
                            
                            result_step.elapsed = ctx.getElapsedTime() - result_step.start_time;
                            if(Array.isArray(args[1])) {
                                result_step.fetch = args[1].length;
                            }
                        });
                    });
                }

                sql_step.elapsed = ctx.getElapsedTime() - sql_step.start_time;
            });

        }, function (obj, args, ret) {
            //Monk
            if(ret) {
                var ctx = TraceContextManager.getCurrentContext(),
                    sql_step = ctx.profile.getLastSteps(1)[0];
                self.agent.aop.after(ret, 'toArray', function (obj, args) {
                    sql_step.elapsed = ctx.getElapsedTime() - sql_step.start_time;
                    ctx.stack.pop();
                    
                    var result_step = new ResultSetStep();
                    result_step.start_time = ctx.getElapsedTime();
                    result_step.sqlhash = sql_step.hash;
                    ctx.profile.push(result_step);
                    ctx.stack.push('Mongodb fetch');

                    self.agent.aop.functionHook(args, -1, null, function (obj, args) {
                        ctx.stack.pop();
                        if(args[0]) {
                            return;
                        }

                        result_step.elapsed = ctx.getElapsedTime() - result_step.start_time;
                        if(Array.isArray(args[1])) {
                            result_step.fetch = args[1].length;
                        }
                    });
                });
            }
        });
    });

    var updateCommand = ['update', 'updateOne', 'updateMany'];
    updateCommand.forEach(function (command) {
        self.agent.aop.both(mod.Collection.prototype, command, function (obj, args) {
            //args[0] where, args[1] set
            var ctx = TraceContextManager.getCurrentContext();
            if(ctx == null) {return;}

            ctx.stack.push('Mongodb ' + command);
            var sql_step = new SqlStepX();
            var sql = 'mongodb ' + command + ': set=' + JSON.stringify(args[1]) + ', where=' + JSON.stringify(args[0]);
            sql_step.hash = HashUtil.hashFromString(sql);
            sql_step.start_time = ctx.getElapsedTime();
            sql_step.crud = 'U'.charCodeAt(0);
            DataTextAgent.SQL.add(sql_step.hash, sql);

            ctx.profile.push(sql_step);

            self.agent.aop.functionHook(args, -1, null, function (obj, args) {
                ctx.stack.pop();
                if(args[0] != null) {
                    //error
                }
                if(args.length > 1) {
                    var result = args[1];
                    sql_step.updated = result.result['nModified'] || 0;
                }

                sql_step.elapsed = ctx.getElapsedTime() - sql_step.start_time;
            });
        });
    });

    var deleteCommand = ['delete', 'deleteMany', 'deleteOne', 'remove', 'removeMany', 'removeOne'];
    deleteCommand.forEach(function (command) {
        self.agent.aop.both(mod.Collection.prototype, command, function (obj, args) {
            //args[0] where
            var ctx = TraceContextManager.getCurrentContext();
            if(ctx == null) { return; }

            var sql_step = new SqlStepX();
            var sql = 'mongodb ' + command + ': ' + JSON.stringify(args[0]);
            sql_step.hash = HashUtil.hashFromString(sql);
            sql_step.start_time = ctx.getElapsedTime();
            sql_step.crud = 'D'.charCodeAt(0);
            DataTextAgent.SQL.add(sql_step.hash, sql);

            ctx.profile.push(sql_step);

            self.agent.aop.functionHook(args, -1, null, function (obj, args) {
                if(args[0] != null) {
                    //error
                }
                sql_step.elapsed = ctx.getElapsedTime() - sql_step.start_time;
            });
        });
    });

    var anotherCommand = ['findAndReplace', 'findAndUpdate', 'findAndDelete'
        , 'findOneAndUpdate', 'findOneAndReplace', 'findOneAndDelete', 'findAndModify'];
    anotherCommand.forEach(function (command) {
        self.agent.aop.both(mod.Collection.prototype, command, function (obj, args) {

            var ctx = TraceContextManager.getCurrentContext();
            if(ctx == null) { return; }

            var sql_step = new SqlStepX();
            var sql = 'mongodb ' + command + ': where=' + JSON.stringify(args[0]);
            sql_step.hash = HashUtil.hashFromString(sql);
            sql_step.start_time = ctx.getElapsedTime();
            sql_step.crud = 'S'.charCodeAt(0);
            DataTextAgent.SQL.add(sql_step.hash, sql);

            ctx.profile.push(sql_step);

            self.agent.aop.functionHook(args, -1, null, function (obj, args) {
                if(args[0] != null) {
                    //error
                }
                sql_step.elapsed = ctx.getElapsedTime() - sql_step.start_time;
            });
        });
    });
};

exports.MongoObserver = MongoObserver;