/**
 * Copyright 2016 the WHATAP project authors. All rights reserved.
 * Use of this source code is governed by a license that
 * can be found in the LICENSE file.
 */

var MeterSocketio = require('../counter/meter/meter-socket.io');

var SocketIOObserver = function(agent){
    this.agent = agent;
    this.packages = ['socket.io'];
};

SocketIOObserver.prototype.inject = function( mod ){
    var self = this;
    var aop = self.agent.aop;

    if(mod.__whatap_observe__) { return; }
    mod.__whatap_observe__ = true;

    aop.after(mod.prototype, ['listen','attach'], function(obj, args, ret) {
        if (!ret.sockets) return;

        aop.before(ret.sockets, ['on', 'addListener'], function(obj, args) {
            if (args[0] !== 'connection') return;

            aop.functionHook(args, -1, function(obj, args) {
                if (!args[0]) return;

                var socket = args[0];

                MeterSocketio.connected(1);

                socket.on('disconnect', function() {
                    MeterSocketio.disconnected();
                });

                aop.before(socket, ['emit', 'send'], function(obj, args) {
                    if (args[0] === 'newListener') return;
                    MeterSocketio.send(null, args);
                });

                aop.before(socket, ['on', 'addListener'], function(obj, args) {
                    if (args[0] === 'disconnect') return;
                    aop.functionHook(args, -1, function (obj, args) {
                        MeterSocketio.receive(null, args[0]);
                    });
                });
            });
        });
    });
}

exports.SocketIOObserver = SocketIOObserver;