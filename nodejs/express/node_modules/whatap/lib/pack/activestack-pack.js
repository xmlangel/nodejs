/**
 * Copyright 2016 the WHATAP project authors. All rights reserved.
 * Use of this source code is governed by a license that
 * can be found in the LICENSE file.
 */

var Pack = require('./pack'),
    PackEnum = require('./packenum'),
    Long = require('long');

function ActiveStackPack() {
    Pack.call(this);

    this.seq = Long.fromNumber(0);
    this.profile_seq = Long.fromNumber(0);
    this.service = 0;
    this.elapsed = 0;
    this.cpuTime = 0;
    this.malloc = 0;
    this.sqlCount = 0;
    this.sqlTime = 0;
    this.httpcCount = 0;
    this.httpcTime = 0;

    this.act_dbc = 0;
    this.act_sql = 0;
    this.act_crud = 0;
    this.act_httpc = 0;

    this.thread_id = Long.fromNumber(0);
    this.thread_stat = 0;
    this.callstack = [];

    this.link_pos = Long.fromNumber(0);
    this.link_type = 0;
    this.link_next = Long.fromNumber(0);

    this.caller_oid = Long.fromNumber(0);
    this.caller_seq = Long.fromNumber(0);

    this.remote_ip = 0;
    this.userid = Long.fromNumber(0);
    this.callstack_hash = 0;
}

ActiveStackPack.prototype = new Pack();
ActiveStackPack.prototype.constructor = ActiveStackPack;
ActiveStackPack.prototype.getPackType = function () {
    return PackEnum.ACTIVESTACK;
};
ActiveStackPack.prototype.write = function(dout) {
    Pack.prototype.write.call(this, dout);

    dout.writeLong(this.seq);
    dout.writeLong(this.profile_seq);
    dout.writeDecimal(this.service);
    dout.writeDecimal(this.elapsed);
    dout.writeDecimal(this.cpuTime);
    dout.writeDecimal(this.sqlCount);
    dout.writeDecimal(this.sqlTime);
    dout.writeDecimal(this.malloc);
    dout.writeDecimal(this.httpcCount);
    dout.writeDecimal(this.httpcTime);

    dout.writeDecimal(this.act_dbc);
    dout.writeDecimal(this.act_sql);
    dout.writeByte(this.act_crud);
    dout.writeDecimal(this.act_httpc);

    dout.writeDecimal(this.thread_id);
    dout.writeByte(this.thread_stat);
    dout.writeIntArray(this.callstack);

    dout.writeDecimal(this.link_pos);
    dout.writeByte(this.link_type);
    dout.writeDecimal(this.link_next);

    dout.writeDecimal(this.caller_oid);
    dout.writeDecimal(this.caller_seq);

    dout.writeDecimal(this.remote_ip);
    dout.writeDecimal(this.userid);
    dout.writeDecimal(this.callstack_hash);
};
ActiveStackPack.prototype.read = function(din) {

    Pack.prototype.read.call(this, din);

    this.seq = din.readLong();
    this.profile_seq = din.readLong();
    this.service = din.readDecimal();
    this.elapsed = din.readDecimal();
    this.cpuTime = din.readDecimal();
    this.sqlCount = din.readDecimal();
    this.sqlTime = din.readDecimal();
    this.malloc = din.readDecimal();
    this.httpcCount = din.readDecimal();
    this.httpcTime = din.readDecimal();

    this.act_dbc = din.readDecimal();
    this.act_sql = din.readDecimal();
    this.act_crud = din.readByte();
    this.act_httpc = din.readDecimal();

    this.thread_id = din.readDecimal();
    this.thread_stat = din.readByte();
    this.callstack = din.readIntArray();

    this.link_pos = din.readDecimal();
    this.link_type = din.readByte();
    this.link_next = din.readDecimal();

    this.caller_oid = din.readDecimal();
    this.caller_seq = din.readDecimal();

    this.remote_ip = din.readDecimal();
    this.userid = din.readDecimal();
    this.callstack_hash = din.readDecimal();

    return this;
};
ActiveStackPack.prototype.toString = function() {
    return "ActiveStackPack " + Pack.prototype.toString.call(this) + "[seq=" + this.seq + ", profile_seq=" + this.profile_seq + ", service=" + this.service + ", elapsed=" + this.elapsed
        + ", cpuTime=" + this.cpuTime + ", malloc=" + this.malloc + ", sqlCount=" + this.sqlCount + ", sqlTime=" + this.sqlTime + ", httpcCount=" + this.httpcCount
        + ", httpcTime=" + this.httpcTime + ", act_dbc=" + this.act_dbc + ", act_sql=" + this.act_sql + ", act_crud=" + this.act_crud + ", act_httpc=" + this.act_httpc
        + ", thread_id=" + this.thread_id + ", thread_stat=" + this.thread_stat + ", callstack=" + this.callstack.length + ", link_pos=" + this.link_pos
        + ", link_type=" + this.link_type + ", link_next=" + this.link_next + ", caller_oid=" + this.caller_oid + ", caller_seq=" + this.caller_seq + "]";
};

module.exports = ActiveStackPack;