/**
 * Copyright 2016 the WHATAP project authors. All rights reserved.
 * Use of this source code is governed by a license that
 * can be found in the LICENSE file.
 */

var Pack        = require('./pack'),
    PackEnum    = require('./packenum'),
    DataOutputX = require('./../io/data-outputx'),
    DataInputX  = require('./../io/data-inputx'),
    NETSTAT     = require('./netstat'),
    Long        = require('long');

function CounterPack() {
    Pack.call(this);

    this.duration = 0;// sec
    this.cputime = Long.fromNumber(0);
    this.heap_tot = 0;
    this.heap_use = 0;
    this.heap_perm = 0;
    this.heap_pending_finalization = 0;
    this.gc_count = 0;
    this.gc_time = Long.fromNumber(0);
    this.service_count = 0;
    this.service_error = 0;
    this.service_time = Long.fromNumber(0);
    this.resp_90pct = 0;
    this.service_slow_count = 0;
    this.service_sqlex_count = 0;
    this.service_malloc = Long.fromNumber(0);
    this.jdbc_conn_open_count = 0;
    this.jdbc_conn_open_time = Long.fromNumber(0);
    this.sql_count = 0;
    this.sql_slow_count = 0;
    this.sql_error = 0;
    this.sql_time = Long.fromNumber(0);
    this.sql_fetch_count = Long.fromNumber(0);
    this.sql_fetch_time = Long.fromNumber(0);
    this.sql_update_record = Long.fromNumber(0);
    this.sql_commit_count = Long.fromNumber(0);

    this.sql_select = 0;
    this.sql_update = 0;
    this.sql_delete = 0;
    this.sql_insert = 0;
    this.sql_others = 0;
    this.httpc_count = 0;
    this.httpc_error = 0;
    this.httpc_time = Long.fromNumber(0);

    this.act_svc_count = 0;
    this.act_svc_uniq = 0;
    this.act_svc_hang = 0;
    this.act_svc_slice = [0, 0, 0];
    this.act_stack_uniq = 0;
    this.act_ip_uniq = 0;
    this.act_user_uniq = 0;
    this.act_sql_count = 0;
    this.act_httpc_count = 0;

    this.cpu = 0;
    this.cpu_sys = 0;
    this.cpu_usr = 0;
    this.cpu_wait = 0;
    this.cpu_steal = 0;
    this.cpu_irq = 0;

    this.cpu_proc = 0;
    this.cpu_cores = 0;
    this.mem = 0;
    this.swap = 0;
    this.disk = 0;

    this.thread_total_started = Long.fromNumber(0);
    this.thread_count = 0;
    this.thread_daemon = 0;
    this.thread_peak_count = 0;

    this.status200 = 0;
    this.status300 = 0;
    this.status400 = 0;
    this.status500 = 0;

    this.agent_time_gap = 0;
    this.starttime = Long.fromNumber(0);
    this.self_seq = Long.fromNumber(0);
    this.self_queue_size = 0;
    this.self_pack_dropped = Long.fromNumber(0);
    this.self_sent_pack = Long.fromNumber(0);
    this.self_sent_bytes = Long.fromNumber(0);

    this.db_num_active = null;
    this.db_num_idle = null;
    this.netstat = null;

    this.host_ip = 0;
    this.proc_fd = 0;
    this.tps = 0;
    this.resp_time = 0;

    this.websocket_count = 0;
    this.websocket_in = Long.fromNumber(0);
    this.websocket_out = Long.fromNumber(0);
}
CounterPack.prototype = new Pack();
CounterPack.prototype.constructor = CounterPack;
CounterPack.prototype.getPackType = function () {
    return PackEnum.COUNTER;
};
CounterPack.prototype.write = function(o) {
    Pack.prototype.write.call(this, o);

    var dout = new DataOutputX();
    dout.writeDecimal(this.duration);
    dout.writeDecimal(this.cputime);
    dout.writeDecimal(this.heap_tot);
    dout.writeDecimal(this.heap_use);
    dout.writeDecimal(this.heap_perm);
    dout.writeDecimal(this.gc_count);
    dout.writeDecimal(this.gc_time);
    dout.writeDecimal(this.heap_pending_finalization);
    dout.writeDecimal(this.service_count);
    dout.writeDecimal(this.service_error);
    dout.writeDecimal(this.service_time);
    dout.writeDecimal(this.service_90pct);
    dout.writeDecimal(this.service_slow_count);
    dout.writeDecimal(this.service_sqlex_count);
    dout.writeDecimal(this.service_malloc);

    dout.writeDecimal(this.jdbc_conn_open_count);
    dout.writeDecimal(this.jdbc_conn_open_time);
    dout.writeDecimal(this.sql_count);
    dout.writeDecimal(this.sql_slow_count);
    dout.writeDecimal(this.sql_error);
    dout.writeDecimal(this.sql_time);
    dout.writeDecimal(this.sql_fetch_count);
    dout.writeDecimal(this.sql_fetch_time);
    dout.writeDecimal(this.sql_update_record);
    dout.writeDecimal(this.sql_commit_count);

    dout.writeDecimal(this.sql_select);
    dout.writeDecimal(this.sql_update);
    dout.writeDecimal(this.sql_delete);
    dout.writeDecimal(this.sql_insert);
    dout.writeDecimal(this.sql_others);
    dout.writeDecimal(this.httpc_count);
    dout.writeDecimal(this.httpc_error);
    dout.writeDecimal(this.httpc_time);
    dout.writeDecimal(this.act_svc_hang);
    dout.writeDecimal(this.act_svc_uniq);
    dout.writeDecimal(this.act_svc_count);
    CounterPack.writeShortArray(dout, this.act_svc_slice);
    dout.writeDecimal(this.act_ip_uniq);
    dout.writeDecimal(this.act_user_uniq);
    dout.writeDecimal(this.act_sql_count);
    dout.writeDecimal(this.act_httpc_count);
    dout.writeFloat(this.cpu);
    dout.writeFloat(this.cpu_sys);
    dout.writeFloat(this.cpu_usr);
    dout.writeFloat(this.cpu_wait);
    dout.writeFloat(this.cpu_steal);
    dout.writeFloat(this.cpu_irq);
    dout.writeFloat(this.cpu_proc);
    dout.writeDecimal(this.cpu_cores);
    dout.writeFloat(this.mem);
    dout.writeFloat(this.swap);
    dout.writeFloat(this.disk);
    dout.writeDecimal(this.thread_total_started);
    dout.writeDecimal(this.thread_count);
    dout.writeDecimal(this.thread_daemon);
    dout.writeDecimal(this.thread_peak_count);

    dout.writeDecimal(this.status200);
    dout.writeDecimal(this.status300);
    dout.writeDecimal(this.status400);
    dout.writeDecimal(this.status500);

    var db = this.db_num_active != null && this.db_num_idle != null;
    dout.writeBoolean(db);
    if (db) {
        this.db_num_active.toBytes(dout);
        this.db_num_idle.toBytes(dout);
    }

    if (this.netstat == null) {
        dout.writeBoolean(false);
    } else {
        dout.writeBoolean(true);
        dout.writeDecimal(this.netstat.est);
        dout.writeDecimal(this.netstat.fin_w);
        dout.writeDecimal(this.netstat.clo_w);
        dout.writeDecimal(this.netstat.tim_w);
    }
    dout.writeDecimal(this.proc_fd);
    dout.writeFloat(this.tps);
    dout.writeDecimal(this.resp_time);

    dout.writeShort(2); // APEnum AP_JAVA = 1, AP_NODE = 2;
    dout.writeDecimal(this.websocket_count);
    dout.writeDecimal(this.websocket_in);
    dout.writeDecimal(this.websocket_out);

    o.writeBlob(dout.toByteArray());

    // SELF 모니터링 부분을 별도로 구분하여 전송함..
    // 프로토콜 오류가 발생할 경우를 대비함 SELF모니터링 부분을 필드가
    // 추가되거나 제거될 수 있음..
    dout = new DataOutputX();
    dout.writeDecimal(this.arrival_delta);
    dout.writeDecimal(this.starttime);
    dout.writeDecimal(this.self_seq);
    dout.writeDecimal(this.self_queue_size);
    dout.writeDecimal(this.self_pack_dropped);
    dout.writeDecimal(this.self_sent_pack);
    dout.writeDecimal(this.self_sent_bytes);

    dout.writeDecimal(this.host_ip);

    o.writeBlob(dout.toByteArray());
};
CounterPack.prototype.read = function(i) {
    Pack.prototype.read.call(this, i);

    var din = new DataInputX(i.readBlob());
    this.duration = din.readDecimal();
    this.cputime = din.readDecimal();
    this.heap_tot = din.readDecimal();
    this.heap_use = din.readDecimal();
    this.heap_perm = din.readDecimal();
    this.gc_count = din.readDecimal();
    this.gc_time = din.readDecimal();
    this.heap_pending_finalization = din.readDecimal();
    this.service_count = din.readDecimal();
    this.service_error = din.readDecimal();
    this.service_time = din.readDecimal();
    this.service_90pct = din.readDecimal();
    this.service_slow_count = din.readDecimal();
    this.service_sqlex_count = din.readDecimal();
    this.service_malloc = din.readDecimal();

    this.jdbc_conn_open_count = din.readDecimal();
    this.jdbc_conn_open_time = din.readDecimal();
    this.sql_count = din.readDecimal();
    this.sql_slow_count = din.readDecimal();
    this.sql_error = din.readDecimal();
    this.sql_time = din.readDecimal();
    this.sql_fetch_count = din.readDecimal();
    this.sql_fetch_time = din.readDecimal();
    this.sql_update_record = din.readDecimal();
    this.sql_commit_count = din.readDecimal();

    this.sql_select = din.readDecimal();
    this.sql_update = din.readDecimal();
    this.sql_delete = din.readDecimal();
    this.sql_insert = din.readDecimal();
    this.sql_others = din.readDecimal();
    this.httpc_count = din.readDecimal();
    this.httpc_error = din.readDecimal();
    this.httpc_time = din.readDecimal();
    this.act_svc_hang = din.readDecimal();
    this.act_svc_uniq = din.readDecimal();
    this.act_svc_count = din.readDecimal();
    this.act_svc_slice = CounterPack.readShortArray(din);
    this.act_ip_uniq = din.readDecimal();
    this.act_user_uniq = din.readDecimal();
    this.act_sql_count = din.readDecimal();
    this.act_httpc_count = din.readDecimal();

    this.cpu = din.readFloat();
    this.cpu_sys = din.readFloat();
    this.cpu_usr = din.readFloat();
    this.cpu_proc = din.readFloat();
    this.cpu_cores = din.readDecimal();

    this.mem = din.readFloat();
    this.swap = din.readFloat();
    this.disk = din.readFloat();
    this.thread_total_started = din.readDecimal();
    this.thread_count = din.readDecimal();
    this.thread_daemon = din.readDecimal();
    this.thread_peak_count = din.readDecimal();

    this.status200 = (din.readDecimal());
    this.status300 = (din.readDecimal());
    this.status400 = (din.readDecimal());
    this.status500 = (din.readDecimal());
    if (din.readBoolean()) {
        //this.db_num_active = new IntIntMap(7, 1f);
        //this.db_num_idle = new IntIntMap(7, 1f);
        this.db_num_active = null;
        this.db_num_idle = null;
        this.db_num_active.toObject(din);
        this.db_num_idle.toObject(din);
    }
    if(din.readBoolean() == true){
        this.netstat = new NETSTAT();
        this.netstat.est = din.readDecimal();
        this.netstat.fin_w = din.readDecimal();
        this.netstat.clo_w = din.readDecimal();
        this.netstat.tim_w = din.readDecimal();
    }

    din = new DataInputX(i.readBlob());
    this.arrival_delta = din.readDecimal();
    this.uptime = din.readDecimal();
    this.self_seq = din.readDecimal();
    this.self_queue_size = din.readDecimal();
    this.self_pack_dropped = din.readDecimal();
    this.self_sent_pack = din.readDecimal();
    this.self_sent_bytes = din.readDecimal();

    return this;
};
CounterPack.writeShortArray = function(out, v) {
    if(v == null) {
        out.writeByte(0);
    } else {
        out.writeByte(v.length);
        for (var i = 0; i < v.length; i++) {
            out.writeShort(v[i]);
        }
    }
};
CounterPack.readShortArray = function(din) {
    var len = din.readByte();
    var arr;

    for(var i = 0 ; i<len; i++) {
        arr[i] = din.readShortBytes();
    }
    return arr;
};
CounterPack.prototype.toString = function() {
    return "CounterPack" + Pack.prototype.toString.call(this) + "[duration=" + this.duration + ", host_ip=" + IPUtil.toString(this.host_ip) + ", cputime=" + this.cputime + ", heap_tot=" + this.heap_tot + ", heap_use="
        + this.heap_use + ", heap_perm=" + this.heap_perm + ", heap_pending_finalization=" + this.heap_pending_finalization + ", gc_count=" + this.gc_count + ", gc_time="
        + this.gc_time + ", service_count=" + this.service_count + ", service_error=" + this.service_error + ", service_time=" + this.service_time + ", service_90pct="
        + this.resp_90pct + ", service_slow_count=" + this.service_slow_count + ", service_sqlex_count=" + this.service_sqlex_count + ", service_malloc="
        + this.service_malloc + ", jdbc_conn_open_count=" + this.jdbc_conn_open_count + ", jdbc_conn_open_time=" + this.jdbc_conn_open_time + ", sql_count="
        + this.sql_count + ", sql_slow_count=" + this.sql_slow_count + ", sql_error=" + this.sql_error + ", sql_time=" + this.sql_time + ", sql_fetch_count="
        + this.sql_fetch_count + ", sql_fetch_time=" + this.sql_fetch_time + ", sql_update_record=" + this.sql_update_record + ", sql_commit_count=" + this.sql_commit_count
        + ", sql_select=" + this.sql_select + ", sql_update=" + this.sql_update + ", sql_delete=" + this.sql_delete + ", sql_insert=" + this.sql_insert + ", sql_others="
        + this.sql_others + ", httpc_count=" + this.httpc_count + ", httpc_error=" + this.httpc_error + ", httpc_time=" + this.httpc_time + ", act_svc_count="
        + this.act_svc_count + ", act_svc_uniq=" + this.act_svc_uniq + ", act_svc_hang=" + this.act_svc_hang + ", act_svc_slice=" + this.act_svc_slice.length
        + ", act_stack_uniq=" + this.act_stack_uniq + ", act_ip_uniq=" + this.act_ip_uniq + ", act_user_uniq=" + this.act_user_uniq + ", act_sql_count="
        + this.act_sql_count + ", act_httpc_count=" + this.act_httpc_count + ", cpu=" + this.cpu + ", cpu_sys=" + this.cpu_sys + ", cpu_usr=" + this.cpu_usr + ", cpu_proc="
        + this.cpu_proc + ", cpu_cores=" + this.cpu_cores + ", mem=" + this.mem + ", swap=" + this.swap + ", disk=" + this.disk + ", thread_total_started="
        + this.thread_total_started + ", thread_count=" + this.thread_count + ", thread_daemon=" + this.thread_daemon + ", thread_peak_count=" + this.thread_peak_count
        + ", status200=" + this.status200 + ", status300=" + this.status300 + ", status400=" + this.status400 + ", status500=" + this.status500 + ", arrival_delta="
        + this.agent_time_gap + ", uptime=" + this.starttime + ", self_seq=" + this.self_seq + ", self_queue_size=" + this.self_queue_size + ", self_pack_dropped="
        + this.self_pack_dropped + ", self_sent_pack=" + this.self_sent_pack + ", self_sent_bytes=" + this.self_sent_bytes + ",db_num_active=" + this.db_num_active
        + ",db_num_idle=" + this.db_num_idle + ",netstat=" + this.netstat + ",tps=" + this.tps+ ",resp_time=" + this.resp_time+ ",proc_fd=" + this.proc_fd+ "]";
};

module.exports = CounterPack;