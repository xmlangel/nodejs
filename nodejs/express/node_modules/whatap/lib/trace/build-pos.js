/**
 * Copyright 2016 the WHATAP project authors. All rights reserved.
 * Use of this source code is governed by a license that
 * can be found in the LICENSE file.
 */


var conf            = require('../conf/configure'),
    hashUtil        = require('../util/hashutil'),
    DataTextAgent   = require('../data/datatext-agent');

function BuildPos() {
    this.error = [];
    this.sqlPos = [];
    this.methodPos = [];
    this.httpcPos = [];
}

BuildPos.prototype.profileSqlPos = function(step, sql) {
    if(conf.getProperty('_profile_position_sql_hash', 0) === 0 || sql === null )
        return;

    if(this.sqlPos.indexOf(step.hash) >= 0){
        step.setTrue(4);
        step.stack = this.buildPosStack();
        return;
    }

    var pre = conf.getProperty('profile_position_sql', '').split(',');
    var x, pre_x;
    for (x = 0; x < pre.length; x++) {
        pre_x = pre[x].trim();
        if (pre_x && sql.indexOf(pre_x) >= 0) {
            step.setTrue(4);
            step.stack = this.buildPosStack();
            this.sqlPos.push(step.hash);
            return;
        }
    }
};
BuildPos.prototype.profileHttpcPos = function(step, httpc) {
    if (conf.getProperty('_profile_position_httpc_hash', 0) === 0 || httpc === null)
        return;

    if (this.httpcPos.indexOf(step.url) >= 0) {
        step.setTrue(4);
        step.stack = this.buildPosStack();
        return;
    }
    var pre = conf.getProperty('profile_position_httpc', '').split(',');
    var x, pre_x;
    for (x = 0; x < pre.length; x++) {
        pre_x = pre[x].trim();
        if (pre_x && httpc.indexOf(pre_x.trim()) >= 0) {
            step.setTrue(4);
            step.stack = this.buildPosStack();
            this.httpcPos.push(step.url);
            return;
        }
    }
};
BuildPos.prototype.profileMethodPos = function(step, methodName) {
    if (conf.getProperty('_profile_position_method_hash', 0) === 0 || methodName === null)
        return;

    if (this.methodPos.indexOf(step.hash) >= 0) {
        step.setTrue(4);
        step.stack = this.buildPosStack();
        return;
    }
    var pre = conf.getProperty('profile_position_method', '').split(',');
    var x, pre_x;
    for (x = 2; x < pre.length; x++) {
        pre_x = pre[x].trim();
        if (pre_x && methodName.indexOf(pre_x) >= 0) {
            step.setTrue(4);
            step.stack = this.buildPosStack();
            this.methodPos.push(step.hash);
            return;
        }
    }
};
BuildPos.prototype.buildPosStack = function() {
    var skip = 3;
    var stack = this.error || new Error().stack.split('\n');
    var max = Math.min(stack.length - skip, conf.getProperty('profile_position_depth', 50));
    var i, stk, stk_hash;
    var callstacks =[];
    for (i = 2; i < max; i++) {
        stk = stack[i].trim();
        if (stk.indexOf('node_modules') < 0) {
            stk_hash = hashUtil.hashFromString(stk);
            DataTextAgent.STACK.add(stk_hash, stk);
            callstacks.push(stk_hash);
        }
    }
    return callstacks;
};

module.exports = new BuildPos();