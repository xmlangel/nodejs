/**
 * Copyright 2016 the WHATAP project authors. All rights reserved.
 * Use of this source code is governed by a license that
 * can be found in the LICENSE file.
 */

var fs = require('fs'),
    path = require('path'),
    EventEmitter = require('events').EventEmitter,
    util = require('util');

var DataInputX = require('./../io/data-inputx'),
    secu = require('./../net/security-master'),
    NodeUtil = require('./../util/nodeutil'),
    Cypher = require('./../util/cypher'),
    baseConfigFile = require("./base"),
    MapValue = require('./../value/map-value'),
    property = {},
    lastModifiedTime = undefined;

if(process.env.NODE_ENV){
    var env = process.env.NODE_ENV || 'base';
    Object.assign(baseConfigFile, require('./' + env));
}

var Configuration = function(){
    var self = this;
    EventEmitter.call(this);
    property = baseConfigFile;
    this.apply(property);
    this.inx = 0;
    this._customProps = {};
    this._propertyFilePath = undefined;

    setInterval(function(){
        self.reload();
    }, 10000);
};

Configuration.prototype = new EventEmitter();
Configuration.prototype.constructor = Configuration;

Configuration.prototype.init = function(userOpt, cb){
    this.apply(userOpt != undefined ? userOpt : {});
    this.reload(cb);
};
Configuration.prototype.reload = function(cb){
    var self = this;
    this.getPropertyFile(function(err, propertyFile){
        if(err) {
            console.error(" no license file");
            if(cb) return cb('no license file');
        } else {
            if(propertyFile == false) return;

            var propStats = fs.lstatSync(propertyFile);
            if(lastModifiedTime && lastModifiedTime >= propStats.mtime) return;

            lastModifiedTime = propStats.mtime;

            var props = fs.readFileSync(propertyFile, 'utf8');
            if(props.constructor == String){
                var rowProps = props.split('\n');
                self._customProps = {};
                for(var i = 0 ; i < rowProps.length; i++){
                    var p = rowProps[i].split('=');
                    if(p.length > 1){
                        self._customProps[p[0]] = p[1];
                    }
                }
            }

            self.apply( self._customProps )

            if(cb) cb();
        }
    });
};
Configuration.prototype.apply = function(properties){
    for(var k in properties){
        this.setProperty(k, properties[k]);
    }

    var ips = this.getStringSet("whatap.server.host", "127.0.0.1/127.0.0.1", "/:,");

    this.whatap_server_host = [];

    if(ips && ips.length > 0){
        this.whatap_server_host[0] = ips[0];
        if(ips.length > 1) {
            this.whatap_server_host[1] = ips[1];
        } else {
            this.whatap_server_host[1] = ips[0];
        }
    } else {
        this.whatap_server_host[0] = this.whatap_server_host[1] = "127.0.0.1";
    }
};
Configuration.prototype.getPropertyFile = function(cb){
    var self = this;
    if(self._propertyFilePath) {
        if(cb) cb(null, self._propertyFilePath);
    }

    var checkFolders = [this.getProperty('app.root', process.cwd())];

    if(checkFolders[0] != process.cwd()) {
        checkFolders.push(process.cwd());
    }

    if(checkFolders[0] != path.dirname(require.main.filename)) {
        checkFolders.push(path.dirname(require.main.filename));
    }

    var licenseFile = 'whatap.conf';
    if(process.env.NODE_ENV) {
        licenseFile += '.'+process.env.NODE_ENV;
    }
    var s = this.getProperty('whatap.config', licenseFile);

    function checkOneFolder(fullPath, licenseFile){
        if(fullPath == undefined) {
            if(cb) cb('no license file!');
        }
        NodeUtil.recursiveCall(fullPath, licenseFile, function(err,data){
            if(err) {
                return checkOneFolder(checkFolders.shift(), s);
            } else {
                self._propertyFilePath = data;
                if(cb) return cb(null, data);
            }
        });
    };

    checkOneFolder( checkFolders.slice().shift(), s );
};
Configuration.prototype.getCustomProps = function(){
    var props = {};
    for(var k in this._customProps){
        if(k != 'license' && k != 'whatap.server.host' ){
            props[k] = this._customProps[k];
        }
    }
    return props;
};
Configuration.prototype.saveProperty = function(keyValues){
    var self = this;
    this.getPropertyFile(function(err, propertyFile){
        for(var k in keyValues){
            var v = keyValues[k];

            if(k != 'license' && k != 'whatap.server.host'){
                if(!v || v.length < 1){
                    delete self._customProps[k];
                }else{
                    self._customProps[k] = v;
                }
            }
        }

        var writeContents = '';
        for(var k in self._customProps){
            var v = self._customProps[k];
            writeContents += k +'=' + v +'\n';
        }
        fs.writeFile(propertyFile, writeContents , 'utf-8', function(err, data){
            if(err){
                return console.error(err);
            }
        })
        for(var k in self._customProps){
            var v = self._customProps[k];
            self.setProperty(k, v);
        }
    });
};
Configuration.prototype.setProperty = function(key, value) {
    if(this[key] ==  value) return;
    this[key] = value;
    this.emit(key, value);
};
Configuration.prototype.getProperty = function(key, defaultValue) {
    if(!this[key]){
        return defaultValue;
    } else{
        return this[key];
    }
};
Configuration.prototype.getStringSet = function(key, defaultValue, deli){
    var v = this.getProperty(key, defaultValue);

    if( deli ){
        var vv = deli.split('').forEach(function(item){
            if(v.constructor != Array){
                v = [v];
            }
            var newV = [];
            v.map(function(vvv){
                vvv.split(item).map(function(vvvv){
                    newV.push(vvvv);
                });
            });
            v = newV;
        })
    }
    return v;
};
Configuration.prototype.getWhatapServerHost = function(){
    var inx = this.inx;
    var out = this.whatap_server_host[inx];
    inx = (inx +1) % 2;
    return out;
};
Configuration.prototype.updateNetCypherKey = function(data /* byte[] */) {
    try{
        var data = secu.cypher.decrypt(data);
        var inD = new DataInputX(data);
        this.TRANSFER_KEY = inD.readInt();
        this.SECURE_KEY = inD.readBlob();
        this.HIDE_KEY = inD.readInt();
        this.cypher = new Cypher(this.SECURE_KEY, this.HIDE_KEY);
    } catch(e) {
        
    }
};
Configuration.prototype.readCustomConfig = function(){
    var props = this.getCustomProps();
    var mv = new MapValue();
    for(var k in props){
        mv.putString(k, props[k]);
    }
    return mv;
};
Configuration.prototype.isIgnoreLog = function () {
    return false;
};

module.exports = new Configuration();