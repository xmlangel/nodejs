/**
 * Copyright 2016 the WHATAP project authors. All rights reserved.
 * Use of this source code is governed by a license that
 * can be found in the LICENSE file.
 */

var Long        = require('long'),
    ValueEnum   = require('./valueenum'),
    Value       = require('./value'),
    BooleanValue = require('./boolean-value'),
    NumberValue  = require('./number-value'),
    TextValue    = require('./text-value'),
    DecimalValue = require('./decimal-value'),
    ListValue    = require('./list-value');

function MapValue() {
    Value.call(this);

    this.table = {};
    this.equals = function(obj) {
        if(this == obj) {
            return true;
        }
        if(obj == null) {
            return false;
        }
        if(this.prototype.constructor != obj.prototype.constructor) {
            return false;
        }
        if(this.table == null) {
            if(obj.table != null)
                return false;
        } else if(JSON.stringify(this.table) != JSON.stringify(obj.table)) {
            return false;
        }
        return true;
    };
}

MapValue.prototype = new Value();
MapValue.prototype.constructor = MapValue;
MapValue.prototype.size = function() {
    return Object.keys(this.table).length;
};
MapValue.prototype.isEmpty = function(){
    return this.size() == 0;
};
MapValue.prototype.containsKey = function(key) {
    return this.table.hasOwnProperty(key);
};
MapValue.prototype.keys = function() {
    return Object.keys(this.table);
};
MapValue.prototype.get = function(key) {
    return this.table[key];
};
MapValue.prototype.getBoolean = function(key) {
    var v = this.get(key);
    if(v instanceof BooleanValue) {
        return v.value;
    }
    return false;
};
MapValue.prototype.getInt = function(key) {
    var v = this.table[key];
    if(v instanceof  NumberValue) {
        return v.intValue();
    }
    return 0;
};
MapValue.prototype.getLong = function(key) {
    var v = this.table[key];
    if(v instanceof NumberValue) {
        return v.longValue();
    }
    return 0;
};
MapValue.prototype.getFloat = function(key) {
    var v = this.table[key];
    if(v instanceof NumberValue) {
        return v.floatValue();
    }
    return 0;

};
MapValue.prototype.getText = function(key) {
    var v = this.table[key];
    if(v instanceof TextValue) {
        return v.value;
    }
    return null;
};
MapValue.prototype.putValue = function(key, value) {
    this.table[key] = value;
    return this;
};
MapValue.prototype.putString = function(key, value) {
    this.table[key] = new TextValue(value);
    return this;
};
MapValue.prototype.putLong = function(key, value) {
    this.table[key] = new DecimalValue(value);
};
MapValue.prototype.remove = function(key) {
    var val = this.table[key];
    this.table[key] = null;
    return val;
};
MapValue.prototype.clear = function() {
    this.table = {};
};
MapValue.prototype.toString = function() {
    return JSON.stringify(this.table);
};
MapValue.prototype.getValueType = function() {
    return ValueEnum.MAP;
};
MapValue.prototype.write = function(dout) {
    var sz = this.size(),
        keys = this.keys();
    dout.writeDecimal(sz);

    for(var i=0; i<sz; i++) {
        var key = keys[i];
        dout.writeText(key);
        dout.writeValue(this.table[key]);
    }
};
MapValue.prototype.read = function(din) {
    var count = din.readDecimal(),
        key = '',
        value = null;
    for(var i=0; i<count; i++) {
        key = din.readText();
        value = din.readValue();
        this.putValue(key, value);
    }
    return this;
};
MapValue.prototype.newList = function(name) {
    var list = new ListValue();
    this.putValue(name, list);
    return list;
};
MapValue.prototype.getList = function(key) {
    return this.table[key];
};
MapValue.prototype.toObject = function() {
    return this.table;
};
MapValue.prototype.putAllMap = function(m) {
    var keys = Object.keys(m),
        len = keys.length;

    for(var i=0; i<len; i++) {
        var key = keys[i];
        var value = m[key];
        if(value instanceof Value) {
            this.table[key] = value;
        }
    }
};
MapValue.prototype.putAllMapValue = function(m) {
    this.putAllMap(m.table);
};

module.exports = MapValue;