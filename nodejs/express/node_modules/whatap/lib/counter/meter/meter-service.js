/**
 * Copyright 2016 the WHATAP project authors. All rights reserved.
 * Use of this source code is governed by a license that
 * can be found in the LICENSE file.
 */

var HitMapPack1 = require('../../pack/hitmap-pack1'),
    IntKeyMap = require('../../util/intkey-map'),
    Long = require('long');

function Bucket () {
    this.hitmap = new HitMapPack1();
    this.count = 0;
    this.timesum = Long.fromNumber(0);
    this.error = 0;
    this.status = [0, 0, 0, 0, 0, 0]; /* int array */
    this.slow_count = 0;
    this.sqlex_count = 0;
    this.malloc = Long.fromNumber(0);
    this.resp90pct = 0;

    this.getElapsed90Pct = function () {
        var total = parseInt(this.count * 0.9);
        if(total == 0) {
            return 0;
        }
        for(var timeInx = 0; timeInx < HitMapPack1.LENGTH - 1; timeInx++) {
            if(total >= this.hitmap.hit[timeInx]) {
                total -= this.hitmap.hit[timeInx];
            } else {
                return HitMapPack1.time(timeInx);
            }
            return 80000;
        }
    };
    this.reset = function () {
        this.count = 0;
        this.timesum = Long.fromNumber(0);
        this.error = 0;
        this.status = [0, 0, 0, 0, 0, 0];
        this.slow_count = 0;
        this.sqlex_count = 0;
        this.malloc = 0;
        this.hitmap = new HitMapPack1();
    };
}

function MeterService() {
    if(typeof MeterService.instance === 'object') {
        return MeterService.instance;
    }
    this.bucket = new Bucket();
    MeterService.instance = this;
}

MeterService.prototype.add = function (serviceHash, elapsed, malloc, err, status, xsql) {
    if(elapsed < 0) {
        elapsed = 0;
    }

    var b = this.bucket;
    b.count += 1;
    b.timesum = b.timesum.add(elapsed);
    b.malloc += malloc;
    b.status[status/100]++;
    b.hitmap.add(elapsed, err);
    if(err) {
        b.error += 1;
    }
    if(elapsed >= 30000) {
        b.slow_count += 1;
    }

    if(xsql) {
        b.sqlex_count += 1;
    }

    var topService = MeterService.topN.get(serviceHash);
    if(topService == null) {
        topService = new TopService(serviceHash);
        MeterService.topN.put(serviceHash, topService);
    }
    topService.count += 1;
    topService.time += elapsed;

};
MeterService.prototype.getBucket = function () {
    return this.bucket;
};
MeterService.topN = new IntKeyMap();

function TopService(hash) {
    this.hash = hash | 0;
    this.count = 0;
    this.error = 0;
    this.time = Long.fromNumber(0);

    this.clear = function () {
        this.count = 0;
        this.error = 0;
        this.time = Long.fromNumber(0);
    };
};

module.exports.MeterService = new MeterService();
module.exports.Bucket = Bucket;
module.exports.TopService = TopService;