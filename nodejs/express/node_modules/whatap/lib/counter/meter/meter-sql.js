/**
 * Copyright 2016 the WHATAP project authors. All rights reserved.
 * Use of this source code is governed by a license that
 * can be found in the LICENSE file.
 */

var conf      = require('../../conf/configure'),
    Long      = require('long');

function Bucket() {
    this.count = 0;
    this.time = Long.fromNumber(0);
    this.error = 0;
    this.slow_count = 0;

    this.open_time = Long.fromNumber(0);
    this.open_count = 0;

    this.commit_count = 0;

    this.fetch_count = Long.fromNumber(0);
    this.fetch_time = Long.fromNumber(0);

    this.update_record = Long.fromNumber(0);

    this.sql_select = 0;
    this.sql_update = 0;
    this.sql_delete = 0;
    this.sql_insert = 0;
    this.sql_others = 0;
    this.sql_select_time = Long.fromNumber(0);
    this.sql_update_time = Long.fromNumber(0);
    this.sql_delete_time = Long.fromNumber(0);
    this.sql_insert_time = Long.fromNumber(0);
    this.sql_others_time = Long.fromNumber(0);

    this.db_conn_active = 0;
    this.db_conn_idle = 0;
}

function MeterSql() {
    this.bucket = new Bucket();
}

MeterSql.prototype.initCommit = function (dbc) {
    this.bucket.commit_count++;
};
MeterSql.prototype.addUpate = function (dbc, updated) {
    this.bucket.update_record = this.bucket.update_record.add(updated);
};
MeterSql.prototype.add = function (dbc, crud, elapsed, err, updated) {
    elapsed = (elapsed || 0)
    var b = this.bucket;
    b.count++;
    b.time = b.time.add(elapsed || 0);
    if(err) {
        b.error++;
    }

    switch(crud) {
        case 'S'.charCodeAt(0):
            b.sql_select++;
            b.sql_select_time = b.sql_delete_time.add(elapsed);
            break;
        case 'U'.charCodeAt(0):
            b.sql_update++;
            b.sql_update_time = b.sql_update_time.add(elapsed);
            break;
        case 'D'.charCodeAt(0):
            b.sql_delete++;
            b.sql_delete_time = b.sql_delete_time.add(elapsed);
            break;
        case 'I'.charCodeAt(0):
            b.sql_insert++;
            b.sql_insert_time = b.sql_insert_time.add(elapsed);
            break;
        default:
            b.sql_others++;
            b.sql_others_time = b.sql_others_time.add(elapsed);
            break;
    }

    if(elapsed >= conf.getProperty('trace_active_transcation_red_time', 8)) {
        b.slow_count++;
    }

    if(updated) {
        bucket.update_record = bucket.update_record.add(updated);
    }
};
MeterSql.prototype.addConnOpenTime = function (dbc, time) {
    this.bucket.open_count++;
    this.bucket.open_time = thie.bucket.open_time.add(time);
};
MeterSql.prototype.getBucketReset = function () {
    var b = this.bucket;
    this.bucket = new Bucket();
    return b;
};
MeterSql.prototype.addFetch = function (dbc, count, time) {
    this.bucket.fetch_count = this.bucket.fetch_count.add(count);
    this.bucket.fetch_time = this.bucket.fetch_time.add(time);
};
MeterSql.prototype.setConnection = function (active, idle) {
    this.bucket.db_conn_active = active;
    this.bucket.db_conn_idle = idle;
};

module.exports = new MeterSql();