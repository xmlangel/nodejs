/**
 * Copyright 2016 the WHATAP project authors. All rights reserved.
 * Use of this source code is governed by a license that
 * can be found in the LICENSE file.
 */

var CounterPack         = require('../pack/counter-pack'),
    Service             = require('./task/service'),
    ActiveTransaction   = require('./task/activetransaction'),
    ProcCpu             = require('./task/proc-cpu'),
    HeapMem             = require('./task/heapmem'),
    SystemPerf          = require('./task/systemperf'),
    RealtimeUser        = require('./task/realtimeuser'),
    Socketio            = require('./task/socketio'),
    GCStat              = require('./task/gcstat'),
    Sql                 = require('./task/sql'),
    HttpC               = require('./task/httpc'),
    secuMaster          = require('../net/security-master'),
    DataPackSender      = require('../data/datapack-sender'),
    DateUtil            = require('./../util/dateutil'),
    Long                = require('long');

function CounterManager(agent) {
    this.agent = agent;
    this.time = Date.now();
};

CounterManager.prototype.run = function () {
    var self = this;

    process.nextTick(function () {
        var tasks = [];                                    
        tasks.push(new Service());
        tasks.push(new ActiveTransaction());
        tasks.push(new RealtimeUser());
        tasks.push(new HeapMem());
        tasks.push(new ProcCpu());
        tasks.push(new SystemPerf());
        tasks.push(new Socketio());
        tasks.push(new GCStat());
        tasks.push(new Sql());
        tasks.push(new HttpC());
        self.process(tasks);
    });
};
CounterManager.prototype.process = function (tasks) {
    var interval = this.agent._conf.counter_interval || 5000,
        len = tasks.length, self = this, task;

    var now = parseInt(Date.now()/1000),
        interval_sec = interval / 1000;

    if(now != parseInt(now / interval_sec) * interval_sec ) {
        setTimeout(function () {
            self.process(tasks);
        }, 10, 'whatap');
        return;
    }

    var pw = new CounterPack();
    pw.pcode = secuMaster.PCODE;
    pw.oid = secuMaster.OID;
    pw.time = Long.fromNumber(parseInt(DateUtil.currentTime() / 5000) * 5000);
    pw.duration = interval / 1000;
    for(var i=0; i<len; i++) {
        task = tasks[i];
        task.process(pw);
    }
    pw.starttime = Long.fromNumber(this.agent.starttime);

    DataPackSender.sendCounterPack(pw);

    setTimeout(function () {
        self.process(tasks);
    }, 1000, 'whatap');
};

module.exports = CounterManager;