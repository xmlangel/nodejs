/**
 * Copyright 2016 the WHATAP project authors. All rights reserved.
 * Use of this source code is governed by a license that
 * can be found in the LICENSE file.
 */

var CounterTask         = require('./counter-task'),
    MeterService        = require('../meter/meter-service').MeterService,
    DataPackSender      = require('../../data/datapack-sender'),
    LongKeyLinkedMap    = require('../../util/longkey-linkedmap'),
    Long                = require('long');

function Item(tps, rtime, rtime90) {
    this.tps = tps || 0;
    this.rtime = rtime || 0;
    this.rtime90 = rtime90 || 0;
}

function Service() {
    CounterTask.call(this);
    this.avg30 = new LongKeyLinkedMap(7, 1).setMax(6);

    this.calcTpsResp = function (p, basetime) {
        var basetime = basetime.toString(); /*Long to String*/
        var t = 0, r = 0, r90 = 0, c = 0,
            en = this.avg30.entries(),
            key, val;

        while(en.hasMoreElements()) {
            var entry = en.nextElement();
            key = Long.fromString(entry.getKey());
            val = entry.getValue();
            if(key.gte(basetime)) {
                c++;
                t += val.tps;
                r += val.rtime;
                r90 += val.rtime90;
            }
        }

        if(c > 0) {
            p.tps = parseFloat(t / c);
            p.resp_time = parseInt(r / c);
            p.resp_90pct = parseInt(r90 / c);
        }
    };
};
Service.prototype = new CounterTask();
Service.prototype.constructor = Service;
Service.prototype.process = function (p) {

    var b = MeterService.getBucket();
    p.service_count = b.count;
    p.service_malloc = Long.fromNumber(b.malloc);
    p.service_time = Long.fromValue(b.timesum);
    p.service_error = b.error;
    var rtime90pct = b.getElapsed90Pct();
    p.service_slow_count = b.slow_count;
    p.service_sqlex_count = b.sqlex_count;

    p.status200 = b.status[2];
    p.status300 = b.status[3];
    p.status400 = b.status[4];
    p.status500 = b.status[5];

    if (p.duration > 0) {
        if (b.count <= 0) {
            this.avg30.put(p.time, new Item(0, 0, 0));
        } else {
            this.avg30.put(p.time, new Item(b.count / p.duration, b.timesum.div(b.count).toNumber(), rtime90pct));
        }
        this.calcTpsResp(p, p.time.sub(30000));
    }
    var hp = b.hitmap;
    b.reset();
    hp.time = Long.fromValue(p.time);
    DataPackSender.sendHitMapPack1(hp);
};

module.exports = Service;