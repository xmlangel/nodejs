/**
 * Copyright 2016 the WHATAP project authors. All rights reserved.
 * Use of this source code is governed by a license that
 * can be found in the LICENSE file.
 */

var LinkedMap       = require('../util/linkedmap'),
    StatTranX       = require('./stat-tranx'),
    StatHttpcPack   = require('../pack/stathttpc-pack').StatHttpcPack,
    HttpcRec        = require('../pack/stathttpc-pack').HttpcRec,
    StatServicePack = require('../pack/statservice-pack').StatServicePack,
    DataPackSender  = require('../data/datapack-sender'),
    Long            = require('long');

const TABLE_MAX_SIZE = 5000;

function HTTPC(url, host, port) {
    this.url = url || 0;
    this.host = host || 0;
    this.port = port || 0;
}

HTTPC.prototype.hashCode = function () {
    var prime = 31;
    var result = 1;
    result = prime * result + host;
    result = prime * result + port;
    result = prime * result + url;
    return result;
};
HTTPC.prototype.equals = function (other) {
    if(this === other) {
        return  true;
    }
    if(other == null) {
        return false;
    }
    if(other instanceof Httpc == false) {
        return false;
    }
    return this.host == other.host && this.url == other.url && this.port == other.port;
};
HTTPC.prototype.toString = function () {
    return this.url + '|' + this.host + '|' + this.port;
};
HTTPC.parse = function (key) {
    if(key == null) {
        return null;
    }
    var split = key.split('|');
    if(split.length != 3) {
        return null;
    }
    return new HTTPC(split[0], split[1], split[2]);
};

function StatHttpc() {
    if(typeof StatHttpc.instance === 'object') {
        return StatHttpc.instance;
    }

    this.table = new LinkedMap(TABLE_MAX_SIZE + 1 , 1).setMax(TABLE_MAX_SIZE);
    this.table.create = function (key) {
        if(this.size() >= TABLE_MAX_SIZE) {
            return null;
        }
        var httpc;
        if(typeof key === 'string') {
            httpc = HTTPC.parse(key);
        } else {
            httpc = key;
        }

        if(httpc == null) {
            return null;
        }
        var rec = new HttpcRec();
        rec.setUrlHostPort(httpc.url, httpc.host, httpc.port);
        rec.time_min = Number.MAX_SAFE_INTEGER;
        return rec;
    };
    StatHttpc.instance = this;
}

StatHttpc.prototype.getHttpc = function (url, host, port) {
    return this.table.intern(new HTTPC(url, host, port));
};
StatHttpc.prototype.addHttpcTime = function (service_hash, httpc_url_hash, httpc_host, httpc_port, time, isErr) {
    if(service_hash == 0 || httpc_url_hash == 0) {
        return;
    }
    var urlRec = StatTranX.getService(service_hash);
    if(urlRec !== null) {
        urlRec.httpc_count++;
        urlRec.httpc_time = urlRec.httpc_time.add(time);
        if(urlRec.httpcMap == null) {
            urlRec.httpcMap = StatServicePack.createMap();
        }
        var tc = urlRec.httpcMap.intern(httpc_url_hash);
        if(tc != null) {
            tc.add(time, isErr);
        }
    }
    var httpcRec = this.getHttpc(httpc_url_hash, httpc_host, httpc_port);
    if(httpcRec !== null) {
        httpcRec.count_total++;
        httpcRec.time_sum = httpcRec.time_sum.add(time);
        httpcRec.time_std = httpcRec.time_std.add(Long.fromNumber(time).mul(time));
        httpcRec.time_max = Math.max(httpcRec.time_max, time);
        httpcRec.time_min = Math.min(httpcRec.time_min, time);
        if (isErr) {
            httpcRec.count_error++;
        }
    }
};
StatHttpc.prototype.send = function (now) {
    if(this.table.size() == 0) {
        return;
    }
    var p = new StatHttpcPack().setRecords(this.table.size(), this.table.values());
    p.time = Long.fromNumber(now);
    this.table.clear();
    DataPackSender.sendStatHttpcPack(p);
};

module.exports = new StatHttpc();