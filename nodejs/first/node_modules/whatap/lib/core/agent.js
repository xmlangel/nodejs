/**
 * Copyright 2016 the WHATAP project authors. All rights reserved.
 * Use of this source code is governed by a license that
 * can be found in the LICENSE file.
 */

var os = require('os'),
    fs = require('fs'),
    path = require('path');

var Interceptor = require('./interceptor').Interceptor,
    HttpObserver = require('../observers/http-observer').HttpObserver,
    NetObserver = require('../observers/net-observer').NetObserver,
    ClusterObserver = require('../observers/cluster-observer').ClusterObserver,
    ExpressObserver = require('../observers/express-observer').ExpressObserver,
    GlobalObserver = require('../observers/global-observer').GlobalObserver,
    MongodbObserver = require('../observers/mongodb-observer').MongodbObserver,
    MysqlObserver = require('../observers/mysql-observer').MysqlObserver,
    SocketioObserver = require('../observers/socket.io-observer').SocketIOObserver,
    ProcessObserver  = require('../observers/process-observer').ProcessObserver,
    FileObserver = require('../observers/file-observer').FileObserver,
    Streamobserver = require('../observers/stream-observer').StreamObserver,
    MongoObserver = require('../observers/mongo-observer').MongoObserver,
    MongooseObserver = require('../observers/mongoose-observer').MongooseObserver;

var Configuration = require('./../conf/configure'),
    SecurityMaster = require('./../net/security-master'),
    TcpRequestManager = require('./../net/tcprequest-mgr'),
    TcpSession = require('./../net/tcp-session'),
    PackageCtrHelper = require('./../control/packagectr-helper'),
    DataPackSender = require('../data/datapack-sender'),
    CounterManager = require('./../counter/counter-manager'),
    NodeUtil = require('./../util/nodeutil'),
    WhatapUtil = require('./../util'),
    ParamPack = require('../pack/param-pack').ParamPack,
    PluginLoaderManager = require('../plugin/plugin-loadermanager'),
    Logger = require('../logger');

require('../stat/stat-tranx');
require('../stat/stat-sql');
require('../stat/stat-httpc');
require('../stat/stat-remoteip');
require('../stat/stat-useragent');
require('../stat/timingsender');

var NodeAgent = function(opt) {
    this._userOpt = opt;
    this._initialized = false;
    this.aop = new Interceptor(this);
    this._conf = Configuration;
    this._securityMaster = SecurityMaster;
    this._tcpsession = null;
    this._counterManager = null;
};

NodeAgent.findRoot = function () {
    var root = process.cwd();
    while(root.length > 1) {
        var dir_name = path.join(root, 'node_modules');
        if(fs.existsSync(dir_name)) {
            conf['app.root'] = root;
            return;
        }
        root = path.join(root, '..');
    }

    root = path.dirname(require.main.filename);
    while(root.length > 1) {
        var dir_name = path.join(root, 'node_modules');
        if(fs.existsSync(dir_name)) {
            conf['app.root'] = root;
            return;
        }
        root = path.join(root, '..');
    }
};
NodeAgent.prototype.init = function(cb) {
    
    var self = this;
    if(self._initialized) {
        return;
    }
    self._initialized = true;
    self.starttime = Date.now();
    NodeAgent.findRoot();
    if(conf['app.root'] == null || conf['app.root'].length == 0) {
        return Logger.print("WHATAP-001", "Can not find application root directory", true);
    }

    Logger.initializer.process();
    NodeUtil.getPackageJson();
    PackageCtrHelper.dynamicHook();
    
    Logger.print('WHATAP-100', 'Start initialize config file');
    self._conf.init(this._userOpt , function(e){
        if(e) return;
        
        Logger.print('WHATAP-101', 'Finish initialize config file');
        self._securityMaster.run( function (err) {
            if(err) {
                return;
            }
            Logger.initializer.reset();
            self.connect(function (err) {
                if(err) {
                    Logger.printError('WHATAP-105', 'Failed to connect to whatap server', err, true);
                    return;
                }

                Logger.ONAME = secu.ONAME;
                Logger.initializer.reset();
                
                var param = new ParamPack();
                param.putString("whatap.version", NodeUtil.getVersion()+' '+ NodeUtil.getReleaseDate());
                param.putString("os.name", os.platform());
                param.putString("os.arch", os.arch());
                param.putString('os.release', os.release());
                param.putString('node.version', process.version);
                param.putString('node.uptime', (new Date()).toString());
                param.putString('node.name', NodeUtil.getName());
                param.putString('user.timezone', NodeUtil.getTimeZone());
                param.putString('user.home', os.homedir());
                param.putString('user.hostname', os.hostname())
                DataPackSender.sendBoot(param);
                
                self._counterManager = new CounterManager(self);
                self._counterManager.run();
                
                WhatapUtil.printWhatap();
                PluginLoaderManager.start();
                if(cb) cb();
            });
        });
    });
    
    self.loadObserves();
    return this;
};
NodeAgent.prototype.connect = function (cb) {
    var self = this;
    this._tcpsession = new TcpSession();
    this._tcpsession.open(function(err) {
        if(err) {
            setTimeout(function () {
                self.connect(cb)
            }, 10000);
            return;
        };
        if(cb) cb();
    });
};
NodeAgent.prototype.loadObserves = function(){
    var agent = this;
    var observes = [];

    observes.push(HttpObserver);
    observes.push(NetObserver);
    observes.push(ClusterObserver);
    // observes.push(MongodbObserver);
    observes.push(MysqlObserver);
    observes.push(SocketioObserver);
    observes.push(ExpressObserver);
    observes.push(FileObserver);
    observes.push(MongoObserver);
    observes.push(MongooseObserver);

    var packageToObserve = {};
    observes.forEach(function(observeObj) {
        var observe = new observeObj(agent);
        observe.packages.forEach(function(pkg){
            if(!packageToObserve[pkg]){
                packageToObserve[pkg] = [];
            }
            packageToObserve[pkg].push( observe );
        });
    });

    agent.aop.after(module.__proto__, 'require', function(obj, args, result) {
        PackageCtrHelper.addPackage(args[0], obj.id, result);
        var observes = packageToObserve[args[0]];
        if(observes) {
            observes.forEach(function(observe){
                observe.inject(result, args[0]);
            });
        }
    });

    new ProcessObserver(agent).inject(process, 'process');
    new GlobalObserver(agent).inject(global, 'global');
};

exports.NodeAgent = NodeAgent;