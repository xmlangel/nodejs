/**
 * Copyright 2016 the WHATAP project authors. All rights reserved.
 * Use of this source code is governed by a license that
 * can be found in the LICENSE file.
 */

const TABLE_MAX_SIZE = 5000;

var LongKeyLinkedMap    = require('../util/longkey-linkedmap'),
    BitUtil             = require('../util/bitutil'),
    StatTranX           = require('./stat-tranx'),
    SqlRec              = require('../pack/statsql-pack').SqlRec,
    StatSqlPack         = require('../pack/statsql-pack').StatSqlPack,
    StatServicePack     = require('../pack/statservice-pack').StatServicePack,
    DataPackSender      = require('../data/datapack-sender'),
    Long                = require('long');

function StatSql() {
    if(typeof StatSql.instance === 'object') {
        return StatSql.instance;
    }

    this.table = new LongKeyLinkedMap(TABLE_MAX_SIZE + 1, 1).setMax(TABLE_MAX_SIZE);
    this.table.create = function (key) {
        if(this.isFull()) {
            return null;
        }
        var _key;
        if(typeof key == 'string') {
            _key = Long.fromString(key);
        } else {
            _key = Long.fromValue(key);
        }
        var dbc = BitUtil.getHigh(_key);
        var sql = BitUtil.getLow(_key);

        var rec = new SqlRec();
        rec.setDbcSql(dbc, sql);
        rec.time_min = Number.MAX_SAFE_INTEGER;
        return rec;
    };

    StatSql.instance = this;
}
StatSql.prototype.getSql = function (dbc, sql) {
    return this.table.intern(BitUtil.composite(dbc, sql));
};
StatSql.prototype.addFetch = function (dbc, sql, fetch, fetchTime) {
    if(sql == 0) {
        return;
    }
    var r = this.getSql(dbc, sql);
    if(r != null) {
        r.fetch_count = r.fetch_count.add(fetch);
        r.fetch_time = r.fetch_time.add(fetchTime);
    }
};
StatSql.prototype.addUpdate = function (dbc, sql, updated) {
    if(sql == 0) {
        return;
    }
    var r = this.getSql(dbc, sql);
    if(r != null) {
        r.update_count = r.update_count.add(updated);
    }
};
StatSql.prototype.addSqlActive = function (dbc, sql) {
    if(sql == 0) {
        return;
    }
    var r = this.getSql(dbc, sql);
    if(r != null) {
        r.count_actived++;
    }
};
StatSql.prototype.addSqlTime = function (ctx, svc, dbc, sqlType, sql, time, isErr, updated) {

    if(svc == 0 || sql == 0 || svc == null || sql == null) {
        return;
    }

    time = (time || 0);

    if(updated == null) {
        updated = 0;
    }

    var urlRec = StatTranX.getService(svc);
    if(urlRec != null) {
        switch (sqlType) {
            case 'S'.charCodeAt(0):
                ctx.sql_select++;
                break;
            case 'U'.charCodeAt(0):
                ctx.sql_update++;
                break;
            case 'D'.charCodeAt(0):
                ctx.sql_delete++;
                break;
            case 'I'.charCodeAt(0):
                ctx.sql_insert++;
                break;
            default:
                ctx.sql_others++;
                break;
        }
    }
    if(urlRec.sqlMap == null) {
        urlRec.sqlMap = StatServicePack.createMap();
    }
    var tc = urlRec.sqlMap.intern(sql);
    if(tc != null) {
        tc.add(time, isErr);
    }

    var sqlRec = this.getSql(dbc, sql);
    if(sqlRec != null) {
        sqlRec.count_total++;
        sqlRec.time_sum = sqlRec.time_sum.add(time);
        sqlRec.time_std = sqlRec.time_std.add(Long.fromNumber(time).mul(time));
        sqlRec.time_min = Math.min(sqlRec.time_min, time);
        sqlRec.time_max = Math.max(sqlRec.time_max, time);
        if(isErr) {
            sqlRec.count_error++;
        }
        sqlRec.update_count = sqlRec.update_count.add(updated);
    }
};
StatSql.prototype.send = function (now) {
    if(this.table.size() == 0) {
        return;
    }

    var p = new StatSqlPack().setRecords(this.table.size(), this.table.values());
    p.time = Long.fromNumber(now);
    this.table.clear();
    DataPackSender.sendStatSqlPack(p);
};

module.exports = new StatSql();