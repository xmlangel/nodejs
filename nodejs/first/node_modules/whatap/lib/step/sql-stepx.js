/**
 * Copyright 2016 the WHATAP project authors. All rights reserved.
 * Use of this source code is governed by a license that
 * can be found in the LICENSE file.
 */

var Step        = require('./step'),
    StepEnum    = require('./stepenum'),
    Long        = require('long');

function SqlStepX() {
    Step.call(this);

    this.xtype = 0;
    this.hash = 0;
    this.elapsed = 0;
    this.error = Long.fromNumber(0);
    this.updated = 0;
    this.crud = 0; /*ASCII*/
    this.dbc = 0;

    this.p1 = [];
    this.p2 = [];
    this.pcrc = 0;

    this.start_cpu = 0;
    this.cpu = 0;
    this.start_mem = 0;
    this.mem = 0;

    this.stack = [];

};
SqlStepX.prototype = new Step();
SqlStepX.prototype.constructor = SqlStepX;
SqlStepX.prototype.getStepType = function () {
    return StepEnum.SQL_X;
};
SqlStepX.prototype.write = function (dout) {
    Step.prototype.write.call(this, dout);
    dout.writeDecimal(this.hash);
    dout.writeDecimal(this.elapsed);
    dout.writeDecimal(this.error);
    dout.writeByte(this.xtype);
    dout.writeDecimal(this.updated);
    dout.writeByte(this.crud);
    dout.writeDecimal(this.dbc);

    dout.writeByte(this.opt);

    if(this.isTrue(1)) {
        dout.writeBlob(this.p1);
        dout.writeBlob(this.p2);
        dout.writeByte(this.pcrc);
    }

    if(this.isTrue(2)) {
        dout.writeDecimal(this.start_cpu);
        dout.writeDecimal(this.cpu);
        dout.writeDecimal(this.start_mem);
        dout.writeDecimal(this.mem);
    }

    if(this.isTrue(4)) {
        dout.writeIntArray(this.stack);
    }
};
SqlStepX.prototype.read = function (din) {
    Step.prototype.read.call(this, din);

    this.hash = din.readDecimal();
    this.elapsed = din.readDecimal();
    this.error = din.readDecimal();
    this.xtype = din.readByte();
    this.updated = din.readDecimal();
    this.crud = din.readByte();
    this.dbc = din.readDecimal();

    this.opt = din.readByte();

    if(this.isTrue(1)) {
        this.p1 = din.readBlob();
        this.p2 = din.readBlob();
        this.pcrc = din.readByte();
    }

    if(this.isTrue(2)) {
        this.start_cpu = din.readDecimal();
        this.cpu = din.readDecimal();
        this.start_mem = din.readDecimal();
        this.mem = din.readDecimal();
    }

    if(this.isTrue(4)) {
        this.stack = din.readIntArray();
    }
    return this;
};

module.exports = SqlStepX;