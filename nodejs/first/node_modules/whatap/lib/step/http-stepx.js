/**
 * Copyright 2016 the WHATAP project authors. All rights reserved.
 * Use of this source code is governed by a license that
 * can be found in the LICENSE file.
 */

var Step = require('./step'),
    StepEnum = require('./stepenum'),
    Long = require('long');

function HttpStepX() {
    Step.call(this);

    this.url = 0;
    this.elapsed = 0;
    this.error = Long.fromNumber(0);
    this.host = 0;
    this.port = 0;

    this.status = 0;
    this.callee_pcode = Long.fromNumber(0);
    this.callee_oid = 0;
    this.callee_seq = Long.fromNumber(0);

    this.start_cpu = 0;
    this.cpu = 0;
    this.start_mem = 0;
    this.mem = 0;

    this.stack = [];
};

HttpStepX.prototype = new Step();
HttpStepX.prototype.constructor = HttpStepX;
HttpStepX.prototype.getStepType = function () {
    return StepEnum.HTTPCALL_X;
};
HttpStepX.prototype.write = function(dout) {
    Step.prototype.write.call(this, dout);
    dout.writeDecimal(this.url);
    dout.writeDecimal(this.elapsed);
    dout.writeDecimal(this.error);
    dout.writeDecimal(this.host);
    dout.writeDecimal(this.port);

    dout.writeDecimal(this.status);

    dout.writeByte(this.opt);
    if(this.isTrue(1)) {
        dout.writeDecimal(this.callee_pcode);
        dout.writeDecimal(this.callee_oid);
        dout.writeDecimal(this.callee_seq);
    }

    if(this.isTrue(2)) {
        dout.writeDecimal(this.start_cpu);
        dout.writeDecimal(this.cpu);
        dout.writeDecimal(this.start_mem);
        dout.writeDecimal(this.mem);
    }

    if(this.isTrue(4)) {
        dout.writeIntArray(this.stack);
    }
};
HttpStepX.prototype.read = function(din) {
    Step.prototype.read.call(this, din);
    this.url = din.readDecimal();
    this.elapsed = din.readDecimal();
    this.error = din.readDecimal();
    this.host = din.readDecimal();
    this.port = din.readDecimal();

    this.status = din.readDecimal();

    this.opt = din.readByte();
    if(this.isTrue(1)) {
        this.callee_pcode = din.readDecimal();
        this.callee_oid = din.readDecimal();
        this.callee_seq = din.readDecimal();
    }

    if(this.isTrue(2)) {
        this.start_cpu = din.readDecimal();
        this.cpu = din.readDecimal();
        this.start_mem = din.readDecimal();
        this.mem = din.readDecimal();
    }

    if(this.isTrue(4)) {
        this.stack = din.readIntArray();
    }
    return this;
};

module.exports = HttpStepX;