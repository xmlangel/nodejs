/**
 * Copyright 2016 the WHATAP project authors. All rights reserved.
 * Use of this source code is governed by a license that
 * can be found in the LICENSE file.
 */

var platform = process.platform,
    arch     = process.arch,
    version  = parseFloat(process.version.slice(1));

var os      = require('os'),
    v8      = require('v8'),
    gcstat  =  require('../../bindings/'+platform+'/'+arch+'/whatap.node'),
    Long    = require('long'),
    df      = require('df'),
    pusage  = require('pidusage');

function ResourceProfile() {
    var self = this;
    self.gc_count = Long.fromNumber(0);
    self.gc_time = Long.fromNumber(0);

    setInterval(function () {
        df(function (err, table) {
            table.forEach(function(n, i){
                if(n.mountpoint === '/'){
                    self.disk = n.percent;
                }
            });
        });
    }, 1000);
    setInterval(function () {
        pusage.stat(process.pid, function(err, stat) {
            self.pcpu = stat.cpu;
        });
    }, 1000);

    gcstat.startMonitor(function (starttime, duration, type, flag) {
        // starttime => second
        if(self.gc_count == null) {
            self.gc_count = Long.fromNumber(0);
            self.gc_time = Long.fromNumber(0);
        }
        self.gc_count = self.gc_count.add(1);
        self.gc_time = self.gc_time.add(Number(duration));
    });
}

ResourceProfile.prototype.getCPU = function(){
    var data = {};
    var key;
    var total = 0;
    os.cpus().forEach(function(n){
        for(key in n.times){
            if(!data.hasOwnProperty(key)){
                data[key] = 0;
            }
            data[key] += n.times[key];
            total += n.times[key];
        }
    });

    for(key in data){
        data[key] = data[key]/total * 100;
    }
    data.times = Long.fromNumber(total);
    data.usage = 100 - data.idle;
    data.core = os.cpus().length;
    data.proc = this.pcpu;

    return data;
};
ResourceProfile.prototype.getMemory = function(){
    var stat = v8.getHeapStatistics();
    var data = {};
    data.heap_total = parseInt(stat.total_heap_size/1024);
    data.heap_used = parseInt(stat.used_heap_size/1024);
    data.usage = (os.totalmem() - os.freemem())/os.totalmem();

    return data;
};
ResourceProfile.prototype.getDisk = function(){
    return {'usage' : this.disk};
};
ResourceProfile.prototype.getCPUTime = function () {
    var total = 0;
    var cpus = os.cpus();
    cpus.forEach(function(n){
        total += n.times['user'];
    });
    total = parseInt(total/cpus.length);
    return Long.fromNumber(total);
};
ResourceProfile.prototype.getUsedHeapSize = function () {
    var stat = v8.getHeapStatistics();
    return Long.fromNumber(stat.used_heap_size);
};
ResourceProfile.prototype.getCurrentProcGcInfo = function () {
    return [this.gc_count, this.gc_time];
};

module.exports = new ResourceProfile();