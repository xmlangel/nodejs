/**
 * Copyright 2016 the WHATAP project authors. All rights reserved.
 * Use of this source code is governed by a license that
 * can be found in the LICENSE file.
 */

var CounterTask         = require('./counter-task'),
    StatSql             = require('../../stat/stat-sql'),
    conf                = require('../../conf/configure'),
    TraceContextManager = require('../../trace/trace-context-manager'),
    TraceContext        = require('../../trace/trace-context'),
    ActiveStackPack     = require('../../pack/activestack-pack'),
    ActiveStackStep     = require('../../step/activestack-step'),
    DataPackSender      = require('../../data/datapack-sender'),
    DataTextAgent       = require('../../data/datatext-agent'),
    MeterUsers          = require('../meter/meter-users'),
    KeyGen              = require('../../util/keygen'),
    HashUtil            = require('../../util/hashutil'),
    Long                = require('long');

function ActiveTransaction() {
    CounterTask.call(this);

    this.last_stack_sec = Long.fromNumber(0);
}

ActiveTransaction.prototype = new CounterTask();
ActiveTransaction.prototype.constructor = ActiveTransaction;
ActiveTransaction.prototype.process = function (p) {
    var callstack_enabled = conf.getProperty('active_stack_always_do', false);

    var now_sec = p.time.add(500).div(1000),
        callstack_interval = Long.fromNumber(conf.getProperty('active_stack_callstack_interval_sec', 10000));

    if(now_sec.gt(callstack_interval.add(this.last_stack_sec))) {
        callstack_enabled = true;
        this.last_stack_sec = now_sec;
    }

    if(conf.getProperty('active_stack_enabled', false)) {
        callstack_enabled = false;
    }

    var actUniqServiceSet = new Set(),
        actUniqStackSet = new Set(),
        actIpSet = new Set(),
        actUser = new Set();

    var en = TraceContextManager.getContextEnumeration();
    while(en.hasMoreElements()) {
        var ctx = en.nextElement();
        if(ctx == null) {
            return false;
        }
        var actStack = new ActiveStackPack();
        actStack.time = Long.fromValue(p.time);
        actStack.seq = KeyGen.next();
        actStack.profile_seq = Long.fromValue(ctx.profile_seq);
        actStack.service = ctx.service_hash;
        actStack.remote_ip = ctx.remoteIp;
        actStack.userid = ctx.userid;
        actStack.elapsed = ctx.getElapsedTime();
        actStack.sqlCount = ctx.sql_count;
        actStack.sqlTime = ctx.sql_time;
        actStack.httpcCount = ctx.httpc_count;
        actStack.httpcTime = ctx.httpc_time;
        actStack.thread_id = ctx.thread_id;

        actStack.callstack = [];
        for (var i = 0; i < ctx.stack.length; i++) {
            actStack.callstack[i] = HashUtil.hashFromString(ctx.stack[i]);
            actStack.callstack_hash ^= actStack.callstack[i];
            DataTextAgent.STACK.add(actStack.callstack[i], ctx.stack[i]);
        }
        if(actStack.callstack.length == 1) {
            actStack.callstack.unshift(0);
        }
        actUniqStackSet.add(actStack.callstack_hash);

        if (ctx.active_sqlhash != 0) {
            actStack.act_dbc = ctx.active_dbc;
            actStack.act_sql = ctx.active_sqlhash;
            actStack.act_crud = ctx.active_crud;
            p.act_sql_count++;
            StatSql.addSqlActive(actStack.act_dbc, actStack.act_sql);
        } else if (ctx.active_httpc_hash != 0) {
            actStack.act_httpc = ctx.active_httpc_hash;
            p.act_httpc_count++;
        }

        if (actStack.callstack != null) {
            ctx.profileActive++;

            var step = new ActiveStackStep(actStack.seq);
            step.start_time = ctx.getElapsedTime();
            step.hasCallstack = true;
            ctx.profile.add(step);
        }

        if (actStack.elapsed < conf.getProperty('trace_active_transaction_yellow_time', 3000)) {
            p.act_svc_slice[0]++;
        } else if (actStack.elapsed < conf.getProperty('trace_active_transaction_red_time', 8000)) {
            p.act_svc_slice[1]++;
        } else {
            p.act_svc_slice[2]++;
            if (actStack.elapsed >= conf.getProperty('trace_active_transaction_hang_time', 30000)) {
                p.act_svc_hang++;
            }
        }
        p.act_svc_count++;

        if (actStack.callstack_hash != 0) {
            actUniqStackSet.add(actStack.callstack_hash);
        }
        actUniqServiceSet.add(actStack.service);
        if (ctx.userid != 0) {
            actUser.add(ctx.userid);
            MeterUsers.add(ctx.userid);
        }
        if (ctx.remoteIp != 0) {
            actIpSet.add(ctx.remoteIp);
        }

        if (conf.getProperty('active_stack_enabled', true)) {
            DataPackSender.sendActiveStackPack(actStack);
        }
        p.act_svc_uniq = actUniqServiceSet.size;
        p.act_stack_uniq = actUniqStackSet.size;
        p.act_ip_uniq = actIpSet.size;
        p.act_user_uniq = actUser.size;
    }
};

module.exports = ActiveTransaction;