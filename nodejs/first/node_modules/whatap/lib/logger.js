/**
 * Copyright 2016 the WHATAP project authors. All rights reserved.
 * Use of this source code is governed by a license that
 * can be found in the LICENSE file.
 */

var conf     = require('./conf/configure'),
    DateUtil = require('./util/dateutil'),
    path     = require('path'),
    fs       = require('fs');

var initializer = {
    last : DateUtil.currentTime(),
    lastDateUnit : DateUtil.getDateUnit(),
    lastFileRotation : conf.getProperty('log_rotation_enabled', true),
    reset : function () {
        if(Logger.printWriter)
            Logger.printWriter.close();
        Logger.logfile = null;
        Logger.openFile();
    },
    process : function () {
        var now = DateUtil.currentTime();
        if(now > this.last + DateUtil.MILLIS_PER_HOUR) {
            this.last = now;
            Logger.clearOldLog();
        }
        if(this.lastFileRotation != conf.getProperty('log_rotation_enabled', true)
            || this.lastDateUnit != DateUtil.getDateUnit()
            || (Logger.logfile != null && fs.existsSync(Logger.logfile) == false)) {

            Logger.printWriter.close();
            Logger.logfile = null;
            this.lastFileRotation = conf.getProperty('log_rotation_enabled', true);
            this.lastDateUnit = DateUtil.getDateUnit();
        }
        try {
            Logger.openFile();
        } catch(e) {
            console.log(e);
        }
    }
};

var Logger = {
    ONAME : 'COMMON',
    logfile : null,
    lastLog : {},
    printWriter : null,
    print : function (id, message, sysout) {
        if(this.checkOk(id, 10) == false) {
            return;
        }
        try{
            var b_msg = this.build(id, message);
            if(this.printWriter != null) {
                this.printWriter.write(b_msg);
                this.printWriter.write('\n');
            }
            sysout = (sysout || process.env.WHATAP_PRINT);
            if(sysout) {
                console.log(b_msg);
            }
        } catch (e){
            if(sysout) {
                console.log(e);
            }
        }
    },
    printError : function (id, message, err, sysout) {
        if(this.checkOk(id, 10) == false) {
            return;
        }
        this.print(id, message, false);
        if(sysout) {
            console.error(this.build(id, message));
        }
        if(err) {
            if(this.printWriter != null) {
                this.printWriter.write(err.stack);
                this.printWriter.write('\n');
            }
            if(sysout) {
                console.trace(err);
            }
        }
    },
    checkOk : function (id, sec) {
        if(conf.isIgnoreLog(id)) {
            return false;
        }

        if(Object.keys(Logger.lastLog).length >= 1000) {
            Logger.lastLog = {};
        }

        if(sec > 0) {
            var last = Logger.lastLog[id];
            if(last == null) {
                last = 0;
            }
            var now = Date.now();
            if(now < last + sec * 1000) {
                return false;
            }
            Logger.lastLog[id] = now;
        }
        return true;
    },
    build : function (id, message) {
        var str = DateUtil.datetime(Date.now());
        str += ' [';
        str += id;
        str += '] ';
        str += message;
        return str;
    },
    openFile : function () {
        var root = conf['app.root'];
        var dir = path.join(root, 'logs');
        if(fs.existsSync(dir) == false) {
            fs.mkdirSync(dir);
        }

        if(conf.getProperty('log_rotation_enabled', true)) {
            var file = path.join(dir, 'whatap-' + this.ONAME + '-' + DateUtil.yyyymmdd() + '.log');
            this.logfile = file;
            this.printWriter = fs.createWriteStream(file, {flags : 'a'});
        } else {
            var file = path.join(dir, 'whtap-' + this.ONAME + '.log');
            this.logfile = file;
            this.printWriter = fs.createWriteStream(file, {flags : 'a'});
        }
    },
    clearOldLog : function () {
        if(conf.getProperty('log_rotation_enabled', true) == false) {
            return;
        }
        if(conf.getProperty('log_keep_days', 7) <= 0) {
            return;
        }
        var nowUnit = DateUtil.getDateUnit();
        var root = conf.getProperty('app.root', process.cwd());
        var dir = path.join(root, 'logs');
        var whatap_prefix = "whatap-" + this.ONAME;
        fs.readdir(dir, function (err, files) {

            for(var i=0; i<files.length; i++) {
                var stat = fs.statSync(path.join(dir, files[i]));
                if(stat.isDirectory()) {
                    return true;
                }
                var name = files[i];
                if(name.indexOf(whatap_prefix + '-') < 0) {
                    return true;
                }
                var x = name.lastIndexOf('.');
                if(x < 0) {
                    return true;
                }
                var date = name.substr(whatap_prefix.length + 1, (x - whatap_prefix.length - 1));
                if(date.length != 8) {
                    return true;
                }
                var d = DateUtil.yyyymmdd(date);
                var fileUnit = DateUtil.getDateUnit(d);

                if(nowUnit - fileUnit > conf.getProperty('log_keep_days', 7)) {
                    fs.unlinkSync(path.join(dir, files[i]));
                }
            }

        });
    },
    initializer : initializer
};

module.exports = Logger;