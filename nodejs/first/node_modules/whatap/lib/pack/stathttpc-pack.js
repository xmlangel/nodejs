/**
 * Copyright 2016 the WHATAP project authors. All rights reserved.
 * Use of this source code is governed by a license that
 * can be found in the LICENSE file.
 */

var Pack = require('./pack'),
    PackEnum = require('./packenum'),
    BitUtil = require('../util/bitutil'),
    DataOutputX = require('../io/data-outputx'),
    DataInputX = require('../io/data-inputx'),
    Long = require('long');

function HttpcRec(){
    this.url = 0;
    this.host = 0;
    this.port = 0;
    this.count_total = 0;
    this.count_error = 0;
    this.count_actived = 0;
    this.time_sum = Long.fromNumber(0);
    this.time_std = Long.fromNumber(0);
    this.time_min = 0;
    this.time_max = 0;

    this.toString = function() {
        return 'HttpRec ' + Pack.prototype.toString.call(this) + ', url=' + this.url + ",host=" + this.host + ",port=" + this.port + ",count_total=" + this.count_total + ",count_error=" + this.count_error + ",count_actived=" + this.count_actived + ",time_sum=" + this.time_sum + ",time_std=" + this.time_std + ",time_min=" + this.time_min + ",time_max=" + this.time_max;
    };

    this.setUrlHostPort = function(url, host, port) {
        this.url = url;
        this.host = host;
        this.port = port;
        return this;
    };
    this.merge = function(o) {
        if(o instanceof HttpcRec) {
            this.count_total += o.count_total;
            this.count_error += o.count_error;
            this.count_actived += o.count_actived;
            this.time_sum += o.time_sum;
            this.time_std = o.time_std;
            this.time_max = Math.max(this.time_max, o.time_max);
            this.time_min = Math.min(this.time_min, o.time_min);
        }
    };
    this.key = function() {
        return BitUtil.composite(this.host, this.port);
    };
}

function StatHttpcPack() {
    Pack.call(this);

    this.records = null; /*byte[]*/
    this.record_count = 0; /*int*/

    this.setRecords = function(size /*int*/, items /*Enumeration<HttpcRec>*/) {
        var dout = new DataOutputX();
        // if(typeof items === 'undefined'){
        //     items = size;
        //     size = items.length;
        // }
        dout.writeShort(size);

        var i;
        for (i = 0; i < size; i++) {
            StatHttpcPack.writeRec(dout, items.nextElement());
        }
        this.records = dout.toByteArray();
        this.record_count = size;
        return this;
    };

    this.getRecords = function() {
        var items = [];
        if (this.records == null || 'undefined') {
            return null;
        }

        var din = new DataInputX(this.records);
        var i;
        for (i = 0; i < din.readShort(); i++) {
            items.push(StatServicePack.readRec(din));
        }
        return items;
    };
}

StatHttpcPack.writeRec = function(dout, record){
    if(record instanceof HttpcRec) {
        dout.writeInt(record.url);
        dout.writeInt(record.host);
        dout.writeInt(record.port);
        dout.writeDecimal(record.count_total);
        dout.writeDecimal(record.count_error);
        dout.writeDecimal(record.count_actived);
        dout.writeDecimal(record.time_sum);
        dout.writeDecimal(record.time_std);
        dout.writeDecimal(record.time_min);
        dout.writeDecimal(record.time_max);
    }
};
StatHttpcPack.readRec = function(din) {
    var rec = new HttpcRec();
    rec.url = din.readInt();
    rec.host = din.readInt();
    rec.port = din.readInt();
    rec.count_total = din.readDecimal();
    rec.count_error = din.readDecimal();
    rec.count_actived = din.readDecimal();
    rec.time_sum = din.readDecimal();
    rec.time_std = din.readDecimal();
    rec.time_min = din.readDecimal();
    rec.time_max = din.readDecimal();
    return rec;
};

StatHttpcPack.prototype = new Pack();
StatHttpcPack.prototype.constructor = StatHttpcPack;
StatHttpcPack.prototype.getPackType = function(){
    return PackEnum.STAT_HTTPC;
};
StatHttpcPack.prototype.write = function(dout) {
    Pack.prototype.write.call(this, dout);
    dout.writeBlob(this.records);
    dout.writeDecimal(this.record_count);
};
StatHttpcPack.prototype.toString = function() {
    return 'StatHttpc '
        + Pack.prototype.toString.call(this)
        + ', records='
        + this.record_count
        + ", bytes="
        + (this.records != null ? this.records.length : 0);
};
StatHttpcPack.prototype.read = function(din) {
    Pack.prototype.read.call(this, din);
    this.records = din.readBlob();
    this.record_count = din.readDecimal();
    return this;
};

exports.HttpcRec = HttpcRec;
exports.StatHttpcPack = StatHttpcPack;
