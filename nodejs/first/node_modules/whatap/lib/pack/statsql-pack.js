/**
 * Copyright 2016 the WHATAP project authors. All rights reserved.
 * Use of this source code is governed by a license that
 * can be found in the LICENSE file.
 */

var Pack        = require('./pack'),
    PackEnum    = require('./packenum'),
    DataOutputX = require('../io/data-outputx'),
    DataInputX  = require('../io/data-inputx'),
    BitUtil     = require('../util/bitutil'),
    Long        = require('long');

function SqlRec() {
    this.dbc = 0;
    this.sql = 0;
    this.sql_crud = 0;
    this.count_total = 0;
    this.count_error = 0;
    this.count_actived = 0;
    this.time_sum = Long.fromNumber(0);
    this.time_std = Long.fromNumber(0);
    this.time_min = 0;
    this.time_max = 0;
    this.fetch_count = Long.fromNumber(0);
    this.fetch_time = Long.fromNumber(0);
    this.update_count = Long.fromNumber(0);
}

SqlRec.prototype.merge = function (other) {
    this.count_total += other.count_total;
    this.count_error += other.count_error;
    this.count_actived += other.count_actived;
    this.time_sum = this.time_sum.add(other.time_sum);
    this.time_std = other.time_std;
    this.time_max = Math.max(this.time_max, other.time_max);
    this.time_min = Math.min(this.time_min, other.time_min);
    this.fetch_count = this.fetch_count.add(other.fetch_count);
    this.fetch_time = this.fetch_time.add(other.fetch_time);
    this.update_count = this.update_count.add(other.update_count);
};
SqlRec.prototype.key = function () {
    return BitUtil.composite(this.dbc, this.sql);
};
SqlRec.prototype.setDbcSql = function (dbc, sql) {
    this.dbc = dbc;
    this.sql = sql;
    return this;
};

function StatSqlPack() {
    Pack.call(this);
    this.records = [];
    this.record_count = 0;
    return this;
}

StatSqlPack.prototype = new Pack();
StatSqlPack.prototype.constructor = StatSqlPack;
StatSqlPack.prototype.getPackType = function () {
    return PackEnum.STAT_SQL;
};
StatSqlPack.prototype.toString = function () {
    var str = "StatSql ";
    str += Pack.prototype.toString.call(this);
    str += ", records =";
    str += this.record_count;
    str += ", bytes =";
    str += this.records.length;
    return str;
};
StatSqlPack.prototype.write = function (dout) {
    Pack.prototype.write.call(this, dout);
    dout.writeBlob(this.records);
    dout.writeDecimal(this.record_count);
};
StatSqlPack.prototype.read = function (din) {
    Pack.prototype.read.call(this, din);
    this.records = din.readBlob();
    this.record_count = din.readDecimal();
    return this;
};
StatSqlPack.prototype.setRecords = function (size, items) {
    var dout = new DataOutputX();
    dout.writeShort(size);
    for(var i=0; i<size; i++) {
        StatSqlPack.writeSql(dout, items.nextElement());
    }
    this.records = dout.toByteArray();
    this.record_count = size;
    return this;
};
StatSqlPack.prototype.getRecords = function () {
    var items = [];
    if(this.records == null) {
        return items;
    }

    var din = new DataInputX(this.records);
    var size = din.readShort();
    for(var i=0; i<size; i++) {
        var m = StatSqlPack.readSql(din);
        items.push(m);
    }
    return items;
};
StatSqlPack.writeSql = function (dout, m) {
    dout.writeInt(m.dbc);
    dout.writeInt(m.sql);
    dout.writeByte(m.sql_crud);
    dout.writeDecimal(m.count_total);
    dout.writeDecimal(m.count_error);
    dout.writeDecimal(m.count_actived);
    dout.writeDecimal(m.time_sum);
    dout.writeDecimal(m.time_std);
    dout.writeDecimal(m.time_min);
    dout.writeDecimal(m.time_max);
    dout.writeDecimal(m.fetch_count);
    dout.writeDecimal(m.fetch_time);
    dout.writeDecimal(m.update_count);
};
StatSqlPack.readSql = function (din) {
    var m = new SqlRec();
    m.dbc = din.readInt();
    m.sql = din.readInt();
    m.sql_crud = din.readByte();
    m.count_total = din.readDecimal();
    m.count_error = din.readDecimal();
    m.count_actived = din.readDecimal();
    m.time_sum = din.readDecimal();
    m.time_std = din.readDecimal();
    m.time_min = din.readDecimal();
    m.time_max = din.readDecimal();
    m.fetch_count = din.readDecimal();
    m.fetch_time = din.readDecimal();
    m.update_count = din.readDecimal();
    return m;
};

module.exports.StatSqlPack = StatSqlPack;
module.exports.SqlRec = SqlRec;
